
DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000401a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  0000401a  000040ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800198  00800198  000041e6  2**0
                  ALLOC
  3 .stab         00005064  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000200b  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b257  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000b417  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000b627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000f191  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001043c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001091a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_1>
       8:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_2>
       c:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_10>
      2c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <main>
      8a:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_enuInit>:

#include "USART_priv.h"
#include "USART_config.h"

ES_t UART_enuInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_enuInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <UART_enuInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e9a:	1c 82       	std	Y+4, r1	; 0x04

#if SPEED_MODE == NORMAL
	UCSRA &= ~ (1<<U2X);
	Local_enuErrorState = ES_OK;
#elif SPEED_MODE == DOUBLE
	UCSRA |= (1<<U2X);
     e9c:	ab e2       	ldi	r26, 0x2B	; 43
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	eb e2       	ldi	r30, 0x2B	; 43
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	82 60       	ori	r24, 0x02	; 2
     ea8:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	8c 83       	std	Y+4, r24	; 0x04
	Local_enuErrorState = ES_OK;
#elif UART_MODE == RECIEVER
	UCSRB |= (1<<RXEN);
	Local_enuErrorState = ES_OK;
#elif UART_MODE == TRANSCIEVER
	UCSRB |= (1<<TXEN);
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8c 93       	st	X, r24
	UCSRB |= (1<<RXEN);
     ebc:	aa e2       	ldi	r26, 0x2A	; 42
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e2       	ldi	r30, 0x2A	; 42
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8c 83       	std	Y+4, r24	; 0x04
#else
#error "WRONG UART MAODE"
#endif

	u8 Local_u8UCSRC=0;
     ece:	1b 82       	std	Y+3, r1	; 0x03
#elif DATA_LENGTH == DATA_SIZE_7_BIT
	Local_u8UCSRC &= ~ (1<<UCSZ0);
	Local_u8UCSRC |= (1<<UCSZ1);
	Local_enuErrorState = ES_OK;
#elif DATA_LENGTH == DATA_SIZE_8_BIT
	Local_u8UCSRC |= (1<<UCSZ0);
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRC |= (1<<UCSZ1);
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	84 60       	ori	r24, 0x04	; 4
     eda:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	8c 83       	std	Y+4, r24	; 0x04
#else
#error "WRONG DATA LENGTH"
#endif

#if PARITY_STATE == NO_PARITY
	Local_u8UCSRC &= ~ (1<<UPM0);
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRC &= ~ (1<<UPM1);
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	8c 83       	std	Y+4, r24	; 0x04
#else
#error "WRONG PARITY"
#endif

#if STOP_STATE == ONE_STOP_BIT
	Local_u8UCSRC &= ~ (1<<USBS);
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	8c 83       	std	Y+4, r24	; 0x04
#else
#error "WRONG STOP STATE"
#endif

#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &= ~ (1<<UMSEL);
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState = ES_OK;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	8c 83       	std	Y+4, r24	; 0x04
	Local_enuErrorState = ES_OK;
#else
#error "WRONG CLOCK MODE"
#endif

	Local_u8UCSRC |= (1<<URSEL);//to select UCSRC
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC = Local_u8UCSRC;
     f0a:	e0 e4       	ldi	r30, 0x40	; 64
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	80 83       	st	Z, r24

	u16 Local_u16UBRR = BAUDEQN(BAUD_RATE);
     f12:	8c e0       	ldi	r24, 0x0C	; 12
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = (u8)Local_u16UBRR;
     f1a:	e9 e2       	ldi	r30, 0x29	; 41
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24
	UBRRH |= (Local_u16UBRR>>8);
     f22:	a0 e4       	ldi	r26, 0x40	; 64
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e0 e4       	ldi	r30, 0x40	; 64
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	20 81       	ld	r18, Z
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	89 2f       	mov	r24, r25
     f32:	99 27       	eor	r25, r25
     f34:	82 2b       	or	r24, r18
     f36:	8c 93       	st	X, r24

	return Local_enuErrorState;
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_enuSendChar>:

ES_t UART_enuSendChar(u8 Copy_u8Data)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <UART_enuSendChar+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f54:	19 82       	std	Y+1, r1	; 0x01

	while( ! ( ( UCSRA >> UDRE ) & 1 ) );
     f56:	eb e2       	ldi	r30, 0x2B	; 43
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	82 95       	swap	r24
     f5e:	86 95       	lsr	r24
     f60:	87 70       	andi	r24, 0x07	; 7
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	a1 f3       	breq	.-24     	; 0xf56 <UART_enuSendChar+0xe>
	UDR = Copy_u8Data;
     f6e:	ec e2       	ldi	r30, 0x2C	; 44
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <UART_enuRecieveChar>:

ES_t UART_enuRecieveChar(u8 *Copy_u8Data)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <UART_enuRecieveChar+0x6>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9b 83       	std	Y+3, r25	; 0x03
     f94:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     f96:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Data != NULL )
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	71 f0       	breq	.+28     	; 0xfbc <UART_enuRecieveChar+0x36>
	{
	   while( ! ( ( UCSRA >> RXC ) & 1 ) );
     fa0:	eb e2       	ldi	r30, 0x2B	; 43
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	88 23       	and	r24, r24
     fa8:	dc f7       	brge	.-10     	; 0xfa0 <UART_enuRecieveChar+0x1a>
	   *Copy_u8Data = UDR;
     faa:	ec e2       	ldi	r30, 0x2C	; 44
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	ea 81       	ldd	r30, Y+2	; 0x02
     fb2:	fb 81       	ldd	r31, Y+3	; 0x03
     fb4:	80 83       	st	Z, r24
	   Local_enuErrorState = ES_OK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <UART_enuRecieveChar+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <UART_enuSendString>:

ES_t UART_enuSendString(const char* Copy_sData)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <UART_enuSendString+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	17 c0       	rjmp	.+46     	; 0x1010 <UART_enuSendString+0x42>

	while(*Copy_sData != '\0')
	{
		while( ! ( ( UCSRA >> UDRE ) & 1 ) );
     fe2:	eb e2       	ldi	r30, 0x2B	; 43
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	82 95       	swap	r24
     fea:	86 95       	lsr	r24
     fec:	87 70       	andi	r24, 0x07	; 7
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	90 70       	andi	r25, 0x00	; 0
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	a1 f3       	breq	.-24     	; 0xfe2 <UART_enuSendString+0x14>
		UDR = *Copy_sData;
     ffa:	ac e2       	ldi	r26, 0x2C	; 44
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    1000:	fb 81       	ldd	r31, Y+3	; 0x03
    1002:	80 81       	ld	r24, Z
    1004:	8c 93       	st	X, r24
		Copy_sData++;
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02

ES_t UART_enuSendString(const char* Copy_sData)
{
	ES_t Local_enuErrorState = ES_NOK;

	while(*Copy_sData != '\0')
    1010:	ea 81       	ldd	r30, Y+2	; 0x02
    1012:	fb 81       	ldd	r31, Y+3	; 0x03
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	21 f7       	brne	.-56     	; 0xfe2 <UART_enuSendString+0x14>
		while( ! ( ( UCSRA >> UDRE ) & 1 ) );
		UDR = *Copy_sData;
		Copy_sData++;
	}

	Local_enuErrorState = ES_OK;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <UART_enuRecieveString>:

ES_t UART_enuRecieveString(char* Copy_sData)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <UART_enuRecieveString+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <UART_enuRecieveString+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9d 83       	std	Y+5, r25	; 0x05
    103c:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    103e:	1b 82       	std	Y+3, r1	; 0x03

	u8 Local_u8Data = 0,Local_u8Index = 0;
    1040:	1a 82       	std	Y+2, r1	; 0x02
    1042:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		   while( ! ( ( UCSRA >> RXC ) & 1 ) );
    1044:	eb e2       	ldi	r30, 0x2B	; 43
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	dc f7       	brge	.-10     	; 0x1044 <UART_enuRecieveString+0x18>
		   Local_u8Data = UDR;
    104e:	ec e2       	ldi	r30, 0x2C	; 44
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8a 83       	std	Y+2, r24	; 0x02
		   if(Local_u8Data == '\r' || Local_u8Data == '\n')//enter
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	8d 30       	cpi	r24, 0x0D	; 13
    105a:	19 f0       	breq	.+6      	; 0x1062 <UART_enuRecieveString+0x36>
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	8a 30       	cpi	r24, 0x0A	; 10
    1060:	a1 f4       	brne	.+40     	; 0x108a <UART_enuRecieveString+0x5e>
		   {
			   Copy_sData[Local_u8Index] = '\0';
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	fc 01       	movw	r30, r24
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	10 82       	st	Z, r1
		   {
			   Copy_sData[Local_u8Index] = Local_u8Data;
			   Local_u8Index++;
		   }
	}
	Local_enuErrorState = ES_OK;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret
			   Copy_sData[Local_u8Index] = '\0';
			   break;
		   }
		   else
		   {
			   Copy_sData[Local_u8Index] = Local_u8Data;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
			   Local_u8Index++;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	cf cf       	rjmp	.-98     	; 0x1044 <UART_enuRecieveString+0x18>

000010a6 <TIMER0_enuInit>:
volatile static void *TIMER0_Pvidparameter_CTC = NULL;

u32 Global_u32NumOvf=0;
u8 Global_u8Preload=0;
u32 TIMER0_f32OC0Val=0;
ES_t TIMER0_enuInit(void){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    10b0:	19 82       	std	Y+1, r1	; 0x01
	TCCR0&=0xB7; //mask bit for modes
    10b2:	a3 e5       	ldi	r26, 0x53	; 83
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	87 7b       	andi	r24, 0xB7	; 183
    10be:	8c 93       	st	X, r24

#if  TIMER_MODE==OVF
	TCCR0 &= ~(1 << WGM00);
    10c0:	a3 e5       	ldi	r26, 0x53	; 83
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 7b       	andi	r24, 0xBF	; 191
    10cc:	8c 93       	st	X, r24
	TCCR0 &= ~(1 << WGM01);
    10ce:	a3 e5       	ldi	r26, 0x53	; 83
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e3 e5       	ldi	r30, 0x53	; 83
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	87 7f       	andi	r24, 0xF7	; 247
    10da:	8c 93       	st	X, r24
	 TCCR0 |= (1 << WGM01);
#else
#error "TIMER0_mode has a wrong config"
#endif

	 TCCR0&=0xf8; //mask bit for prescaler
    10dc:	a3 e5       	ldi	r26, 0x53	; 83
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e5       	ldi	r30, 0x53	; 83
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 7f       	andi	r24, 0xF8	; 248
    10e8:	8c 93       	st	X, r24

#if   TIMER_PRES == PRES_1024
	 TCCR0 |= (1<<CS02);
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	84 60       	ori	r24, 0x04	; 4
    10f6:	8c 93       	st	X, r24
	 TCCR0 &= ~(1<<CS01);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8d 7f       	andi	r24, 0xFD	; 253
    1104:	8c 93       	st	X, r24
	 TCCR0 |= (1<<CS00);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	81 60       	ori	r24, 0x01	; 1
    1112:	8c 93       	st	X, r24
	 TCCR0 |= (1<<CS01);
	 TCCR0 |= (1<<CS00);
#else
#error "TIMER0_PRES has a wrong config"
#endif
	 TCCR0&=0xCF; //mask bit for oc_mode
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7c       	andi	r24, 0xCF	; 207
    1120:	8c 93       	st	X, r24
#if   OC_MODE == DISCONNECTED
	 TCCR0 &= ~(1<<COM01);
    1122:	a3 e5       	ldi	r26, 0x53	; 83
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e3 e5       	ldi	r30, 0x53	; 83
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	8c 93       	st	X, r24
	 TCCR0 &= ~(1<<COM00);
    1130:	a3 e5       	ldi	r26, 0x53	; 83
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e5       	ldi	r30, 0x53	; 83
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 7e       	andi	r24, 0xEF	; 239
    113c:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0_OC_MODE has a wrong config"
#endif

return Local_enuErrorState;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <TIMER0_enuSetPreload>:
ES_t TIMER0_enuSetPreload(u8 Copy_u8Preload){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <TIMER0_enuSetPreload+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1154:	19 82       	std	Y+1, r1	; 0x01
	TCNT0=Copy_u8Preload;
    1156:	e2 e5       	ldi	r30, 0x52	; 82
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <TIMER0_enuSetAsyncDelay>:
//fun for interrupt
ES_t TIMER0_enuSetAsyncDelay(u32 Copy_u32Time,void (*Copy_pfunAppFun)(void*),void * Copy_pvidParameter){
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	66 97       	sbiw	r28, 0x16	; 22
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	6f 87       	std	Y+15, r22	; 0x0f
    1184:	78 8b       	std	Y+16, r23	; 0x10
    1186:	89 8b       	std	Y+17, r24	; 0x11
    1188:	9a 8b       	std	Y+18, r25	; 0x12
    118a:	5c 8b       	std	Y+20, r21	; 0x14
    118c:	4b 8b       	std	Y+19, r20	; 0x13
    118e:	3e 8b       	std	Y+22, r19	; 0x16
    1190:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
    1192:	1e 86       	std	Y+14, r1	; 0x0e

		f32 Local_f32TimeOvf=256 * ((f32)TIMER_PRES/TIMER_F_CPU); //cal Time of overflow
    1194:	8f e6       	ldi	r24, 0x6F	; 111
    1196:	92 e1       	ldi	r25, 0x12	; 18
    1198:	a3 e8       	ldi	r26, 0x83	; 131
    119a:	b3 e4       	ldi	r27, 0x43	; 67
    119c:	8a 87       	std	Y+10, r24	; 0x0a
    119e:	9b 87       	std	Y+11, r25	; 0x0b
    11a0:	ac 87       	std	Y+12, r26	; 0x0c
    11a2:	bd 87       	std	Y+13, r27	; 0x0d
		f32 Local_f32NumOvf= Copy_u32Time/Local_f32TimeOvf;      // cal Number of overflow
    11a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    11a6:	78 89       	ldd	r23, Y+16	; 0x10
    11a8:	89 89       	ldd	r24, Y+17	; 0x11
    11aa:	9a 89       	ldd	r25, Y+18	; 0x12
    11ac:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    11ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    11bc:	4c 85       	ldd	r20, Y+12	; 0x0c
    11be:	5d 85       	ldd	r21, Y+13	; 0x0d
    11c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	8e 83       	std	Y+6, r24	; 0x06
    11ca:	9f 83       	std	Y+7, r25	; 0x07
    11cc:	a8 87       	std	Y+8, r26	; 0x08
    11ce:	b9 87       	std	Y+9, r27	; 0x09
		if((Local_f32NumOvf-(u32)Local_f32NumOvf)!=0.0){
    11d0:	6e 81       	ldd	r22, Y+6	; 0x06
    11d2:	7f 81       	ldd	r23, Y+7	; 0x07
    11d4:	88 85       	ldd	r24, Y+8	; 0x08
    11d6:	99 85       	ldd	r25, Y+9	; 0x09
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	6e 81       	ldd	r22, Y+6	; 0x06
    11ee:	7f 81       	ldd	r23, Y+7	; 0x07
    11f0:	88 85       	ldd	r24, Y+8	; 0x08
    11f2:	99 85       	ldd	r25, Y+9	; 0x09
    11f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <TIMER0_enuSetAsyncDelay+0xa4>
    1210:	5a c0       	rjmp	.+180    	; 0x12c6 <TIMER0_enuSetAsyncDelay+0x158>
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
    1212:	6e 81       	ldd	r22, Y+6	; 0x06
    1214:	7f 81       	ldd	r23, Y+7	; 0x07
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	99 85       	ldd	r25, Y+9	; 0x09
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	a1 1d       	adc	r26, r1
    1226:	b1 1d       	adc	r27, r1
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	ac 83       	std	Y+4, r26	; 0x04
    122e:	bd 83       	std	Y+5, r27	; 0x05
			Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
    1230:	6e 81       	ldd	r22, Y+6	; 0x06
    1232:	7f 81       	ldd	r23, Y+7	; 0x07
    1234:	88 85       	ldd	r24, Y+8	; 0x08
    1236:	99 85       	ldd	r25, Y+9	; 0x09
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	6e 81       	ldd	r22, Y+6	; 0x06
    124e:	7f 81       	ldd	r23, Y+7	; 0x07
    1250:	88 85       	ldd	r24, Y+8	; 0x08
    1252:	99 85       	ldd	r25, Y+9	; 0x09
    1254:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8e 83       	std	Y+6, r24	; 0x06
    125e:	9f 83       	std	Y+7, r25	; 0x07
    1260:	a8 87       	std	Y+8, r26	; 0x08
    1262:	b9 87       	std	Y+9, r27	; 0x09
			u8 Local_u8Preload=256-(256*Local_f32NumOvf);
    1264:	6e 81       	ldd	r22, Y+6	; 0x06
    1266:	7f 81       	ldd	r23, Y+7	; 0x07
    1268:	88 85       	ldd	r24, Y+8	; 0x08
    126a:	99 85       	ldd	r25, Y+9	; 0x09
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	53 ec       	ldi	r21, 0xC3	; 195
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	53 e4       	ldi	r21, 0x43	; 67
    1288:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	89 83       	std	Y+1, r24	; 0x01
			TCNT0=Local_u8Preload;
    129e:	e2 e5       	ldi	r30, 0x52	; 82
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	80 83       	st	Z, r24
			 Global_u32NumOvf=Local_u32NumOvf_int;
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	ac 81       	ldd	r26, Y+4	; 0x04
    12ac:	bd 81       	ldd	r27, Y+5	; 0x05
    12ae:	80 93 a0 01 	sts	0x01A0, r24
    12b2:	90 93 a1 01 	sts	0x01A1, r25
    12b6:	a0 93 a2 01 	sts	0x01A2, r26
    12ba:	b0 93 a3 01 	sts	0x01A3, r27
			 Global_u8Preload=Local_u8Preload;}
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	80 93 a4 01 	sts	0x01A4, r24
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <TIMER0_enuSetAsyncDelay+0x178>
			 else
			 	{
				 Global_u32NumOvf = (u32)Local_f32NumOvf;
    12c6:	6e 81       	ldd	r22, Y+6	; 0x06
    12c8:	7f 81       	ldd	r23, Y+7	; 0x07
    12ca:	88 85       	ldd	r24, Y+8	; 0x08
    12cc:	99 85       	ldd	r25, Y+9	; 0x09
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	80 93 a0 01 	sts	0x01A0, r24
    12da:	90 93 a1 01 	sts	0x01A1, r25
    12de:	a0 93 a2 01 	sts	0x01A2, r26
    12e2:	b0 93 a3 01 	sts	0x01A3, r27

			 	}

			 	if(Copy_pfunAppFun != NULL)
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f0       	breq	.+26     	; 0x1308 <TIMER0_enuSetAsyncDelay+0x19a>
			 	{
			 		Timer0_ApFun_OVF= Copy_pfunAppFun;
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	90 93 99 01 	sts	0x0199, r25
    12f6:	80 93 98 01 	sts	0x0198, r24
			 		Timer0_Apvidparameter_OVF = Copy_pvidParameter;
    12fa:	8d 89       	ldd	r24, Y+21	; 0x15
    12fc:	9e 89       	ldd	r25, Y+22	; 0x16
    12fe:	90 93 9b 01 	sts	0x019B, r25
    1302:	80 93 9a 01 	sts	0x019A, r24
    1306:	02 c0       	rjmp	.+4      	; 0x130c <TIMER0_enuSetAsyncDelay+0x19e>

			 	}
			 	else
			 	{
			 		Local_enuErrorState = ES_NULL_POINTER;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	8e 87       	std	Y+14, r24	; 0x0e
			 	}

			 	TIMSK |= (1 << TOIE0);
    130c:	a9 e5       	ldi	r26, 0x59	; 89
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e9 e5       	ldi	r30, 0x59	; 89
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	8c 93       	st	X, r24

			 	return Local_enuErrorState;
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
    131c:	66 96       	adiw	r28, 0x16	; 22
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <TIMER0_enuSetsyncDelay>:


//fun busy wait

ES_t TIMER0_enuSetsyncDelay(u32 Copy_u32Time){
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	66 97       	sbiw	r28, 0x16	; 22
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	6b 8b       	std	Y+19, r22	; 0x13
    1344:	7c 8b       	std	Y+20, r23	; 0x14
    1346:	8d 8b       	std	Y+21, r24	; 0x15
    1348:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    134a:	1a 8a       	std	Y+18, r1	; 0x12
	TIMSK&=~(1<<TOIE0); //disable for interrupt
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8e 7f       	andi	r24, 0xFE	; 254
    1358:	8c 93       	st	X, r24
	f32 Local_f32TimeOvf=256 * ((f32)TIMER_PRES/TIMER_F_CPU); //cal Time of overflow
    135a:	8f e6       	ldi	r24, 0x6F	; 111
    135c:	92 e1       	ldi	r25, 0x12	; 18
    135e:	a3 e8       	ldi	r26, 0x83	; 131
    1360:	b3 e4       	ldi	r27, 0x43	; 67
    1362:	8e 87       	std	Y+14, r24	; 0x0e
    1364:	9f 87       	std	Y+15, r25	; 0x0f
    1366:	a8 8b       	std	Y+16, r26	; 0x10
    1368:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32NumOvf= (f32)Copy_u32Time/Local_f32TimeOvf; // cal Number of overflow
    136a:	6b 89       	ldd	r22, Y+19	; 0x13
    136c:	7c 89       	ldd	r23, Y+20	; 0x14
    136e:	8d 89       	ldd	r24, Y+21	; 0x15
    1370:	9e 89       	ldd	r25, Y+22	; 0x16
    1372:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1380:	3f 85       	ldd	r19, Y+15	; 0x0f
    1382:	48 89       	ldd	r20, Y+16	; 0x10
    1384:	59 89       	ldd	r21, Y+17	; 0x11
    1386:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8a 87       	std	Y+10, r24	; 0x0a
    1390:	9b 87       	std	Y+11, r25	; 0x0b
    1392:	ac 87       	std	Y+12, r26	; 0x0c
    1394:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOvf-(u32)Local_f32NumOvf)!=0.0){
    1396:	6a 85       	ldd	r22, Y+10	; 0x0a
    1398:	7b 85       	ldd	r23, Y+11	; 0x0b
    139a:	8c 85       	ldd	r24, Y+12	; 0x0c
    139c:	9d 85       	ldd	r25, Y+13	; 0x0d
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
    13b2:	6a 85       	ldd	r22, Y+10	; 0x0a
    13b4:	7b 85       	ldd	r23, Y+11	; 0x0b
    13b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    13d2:	88 23       	and	r24, r24
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <TIMER0_enuSetsyncDelay+0xaa>
    13d6:	6f c0       	rjmp	.+222    	; 0x14b6 <TIMER0_enuSetsyncDelay+0x188>

		u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
    13d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    13da:	7b 85       	ldd	r23, Y+11	; 0x0b
    13dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13de:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
    13ee:	8e 83       	std	Y+6, r24	; 0x06
    13f0:	9f 83       	std	Y+7, r25	; 0x07
    13f2:	a8 87       	std	Y+8, r26	; 0x08
    13f4:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
    13f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    13f8:	7b 85       	ldd	r23, Y+11	; 0x0b
    13fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	6a 85       	ldd	r22, Y+10	; 0x0a
    1414:	7b 85       	ldd	r23, Y+11	; 0x0b
    1416:	8c 85       	ldd	r24, Y+12	; 0x0c
    1418:	9d 85       	ldd	r25, Y+13	; 0x0d
    141a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8a 87       	std	Y+10, r24	; 0x0a
    1424:	9b 87       	std	Y+11, r25	; 0x0b
    1426:	ac 87       	std	Y+12, r26	; 0x0c
    1428:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload=256-(256*Local_f32NumOvf);
    142a:	6a 85       	ldd	r22, Y+10	; 0x0a
    142c:	7b 85       	ldd	r23, Y+11	; 0x0b
    142e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1430:	9d 85       	ldd	r25, Y+13	; 0x0d
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	53 ec       	ldi	r21, 0xC3	; 195
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    1464:	e2 e5       	ldi	r30, 0x52	; 82
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	80 83       	st	Z, r24
    146c:	1b c0       	rjmp	.+54     	; 0x14a4 <TIMER0_enuSetsyncDelay+0x176>

		while(Local_u32NumOvf_int){
			while(!((TIFR >> TOV0) & 1));
    146e:	e8 e5       	ldi	r30, 0x58	; 88
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	b9 f3       	breq	.-18     	; 0x146e <TIMER0_enuSetsyncDelay+0x140>
						TIFR |= (1 << TOV0);   //clear flag
    1480:	a8 e5       	ldi	r26, 0x58	; 88
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e5       	ldi	r30, 0x58	; 88
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	8c 93       	st	X, r24
						Local_u32NumOvf_int--;
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	a8 85       	ldd	r26, Y+8	; 0x08
    1494:	b9 85       	ldd	r27, Y+9	; 0x09
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	a1 09       	sbc	r26, r1
    149a:	b1 09       	sbc	r27, r1
    149c:	8e 83       	std	Y+6, r24	; 0x06
    149e:	9f 83       	std	Y+7, r25	; 0x07
    14a0:	a8 87       	std	Y+8, r26	; 0x08
    14a2:	b9 87       	std	Y+9, r27	; 0x09
		u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
		Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
		u8 Local_u8Preload=256-(256*Local_f32NumOvf);
		TCNT0=Local_u8Preload;

		while(Local_u32NumOvf_int){
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	a8 85       	ldd	r26, Y+8	; 0x08
    14aa:	b9 85       	ldd	r27, Y+9	; 0x09
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	a1 05       	cpc	r26, r1
    14b0:	b1 05       	cpc	r27, r1
    14b2:	e9 f6       	brne	.-70     	; 0x146e <TIMER0_enuSetsyncDelay+0x140>
    14b4:	30 c0       	rjmp	.+96     	; 0x1516 <TIMER0_enuSetsyncDelay+0x1e8>
						TIFR |= (1 << TOV0);   //clear flag
						Local_u32NumOvf_int--;
		}
	}
		else {
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf;
    14b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    14b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    14ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    14bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	ab 83       	std	Y+3, r26	; 0x03
    14cc:	bc 83       	std	Y+4, r27	; 0x04
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <TIMER0_enuSetsyncDelay+0x1d8>
			while(Local_u32NumOvf_int){
					while(!((TIFR >> TOV0) & 1));
    14d0:	e8 e5       	ldi	r30, 0x58	; 88
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	b9 f3       	breq	.-18     	; 0x14d0 <TIMER0_enuSetsyncDelay+0x1a2>
								TIFR |= (1 << TOV0);  //clear flag
    14e2:	a8 e5       	ldi	r26, 0x58	; 88
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e5       	ldi	r30, 0x58	; 88
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	81 60       	ori	r24, 0x01	; 1
    14ee:	8c 93       	st	X, r24
								Local_u32NumOvf_int--;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	ab 81       	ldd	r26, Y+3	; 0x03
    14f6:	bc 81       	ldd	r27, Y+4	; 0x04
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	a1 09       	sbc	r26, r1
    14fc:	b1 09       	sbc	r27, r1
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	ab 83       	std	Y+3, r26	; 0x03
    1504:	bc 83       	std	Y+4, r27	; 0x04
						Local_u32NumOvf_int--;
		}
	}
		else {
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf;
			while(Local_u32NumOvf_int){
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	ab 81       	ldd	r26, Y+3	; 0x03
    150c:	bc 81       	ldd	r27, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	a1 05       	cpc	r26, r1
    1512:	b1 05       	cpc	r27, r1
    1514:	e9 f6       	brne	.-70     	; 0x14d0 <TIMER0_enuSetsyncDelay+0x1a2>
					while(!((TIFR >> TOV0) & 1));
								TIFR |= (1 << TOV0);  //clear flag
								Local_u32NumOvf_int--;
				}
		}
	return Local_enuErrorState;
    1516:	8a 89       	ldd	r24, Y+18	; 0x12
	}
    1518:	66 96       	adiw	r28, 0x16	; 22
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <TIMER0_enuGeneratePWM>:
	return Local_enuErrorState;
}
*/

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <TIMER0_enuGeneratePWM+0x6>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1536:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "OC0 has a wrong config"
	#endif
	#endif

	OCR0 = TIMER0_f32OC0Val;
    1538:	ec e5       	ldi	r30, 0x5C	; 92
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 91 a5 01 	lds	r24, 0x01A5
    1540:	90 91 a6 01 	lds	r25, 0x01A6
    1544:	a0 91 a7 01 	lds	r26, 0x01A7
    1548:	b0 91 a8 01 	lds	r27, 0x01A8
    154c:	80 83       	st	Z, r24

	return Local_enuErrorState;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <TIMER0_enuSetCTCVal>:
ES_t TIMER0_enuSetCTCVal(u8 Copy_u8CTC_Val){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <TIMER0_enuSetCTCVal+0x6>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState = ES_NOK;
    1566:	19 82       	std	Y+1, r1	; 0x01

	OCR0 = Copy_u8CTC_Val;
    1568:	ec e5       	ldi	r30, 0x5C	; 92
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;}
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TIMER0_enuSetCALLBACK_CTC>:

ES_t TIMER0_enuSetCALLBACK_CTC(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <TIMER0_enuSetCALLBACK_CTC+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <TIMER0_enuSetCALLBACK_CTC+0x8>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	9b 83       	std	Y+3, r25	; 0x03
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	7d 83       	std	Y+5, r23	; 0x05
    1594:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1596:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PFunApp != NULL)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	79 f0       	breq	.+30     	; 0x15be <TIMER0_enuSetCALLBACK_CTC+0x3e>
	{
		TIMER0_PFun_CTC = Copy_PFunApp;
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	90 93 9d 01 	sts	0x019D, r25
    15a8:	80 93 9c 01 	sts	0x019C, r24
		TIMER0_Pvidparameter_CTC = Copy_PParameterApp;
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	90 93 9f 01 	sts	0x019F, r25
    15b4:	80 93 9e 01 	sts	0x019E, r24
		Local_enuErrorState = ES_OK;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <TIMER0_enuSetCALLBACK_CTC+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    15de:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |= (1 << TOIE0);
    15e0:	a9 e5       	ldi	r26, 0x59	; 89
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e9 e5       	ldi	r30, 0x59	; 89
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	81 60       	ori	r24, 0x01	; 1
    15ec:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <TIMER0_enuEnableCTCInterrupt>:

ES_t TIMER0_enuEnableCTCInterrupt(void)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1606:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |= (1 << OCIE0);
    1608:	a9 e5       	ldi	r26, 0x59	; 89
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e9 e5       	ldi	r30, 0x59	; 89
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	82 60       	ori	r24, 0x02	; 2
    1614:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <__vector_10>:



ISR(VECT_TIMER0_CTC)
{
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFun_CTC != NULL)
    164e:	80 91 9c 01 	lds	r24, 0x019C
    1652:	90 91 9d 01 	lds	r25, 0x019D
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	49 f0       	breq	.+18     	; 0x166c <__vector_10+0x48>
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
    165a:	e0 91 9c 01 	lds	r30, 0x019C
    165e:	f0 91 9d 01 	lds	r31, 0x019D
    1662:	80 91 9e 01 	lds	r24, 0x019E
    1666:	90 91 9f 01 	lds	r25, 0x019F
    166a:	09 95       	icall
	}
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_11>:
ISR(VECT_TIMER0_OVF	)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ApFun_OVF != NULL)
    16bc:	80 91 98 01 	lds	r24, 0x0198
    16c0:	90 91 99 01 	lds	r25, 0x0199
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	09 f4       	brne	.+2      	; 0x16ca <__vector_11+0x38>
    16c8:	3e c0       	rjmp	.+124    	; 0x1746 <__vector_11+0xb4>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    16ca:	80 91 a9 01 	lds	r24, 0x01A9
    16ce:	90 91 aa 01 	lds	r25, 0x01AA
    16d2:	a0 91 ab 01 	lds	r26, 0x01AB
    16d6:	b0 91 ac 01 	lds	r27, 0x01AC
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	a1 1d       	adc	r26, r1
    16de:	b1 1d       	adc	r27, r1
    16e0:	80 93 a9 01 	sts	0x01A9, r24
    16e4:	90 93 aa 01 	sts	0x01AA, r25
    16e8:	a0 93 ab 01 	sts	0x01AB, r26
    16ec:	b0 93 ac 01 	sts	0x01AC, r27
		if(Local_u32Counter == Global_u32NumOvf)
    16f0:	20 91 a9 01 	lds	r18, 0x01A9
    16f4:	30 91 aa 01 	lds	r19, 0x01AA
    16f8:	40 91 ab 01 	lds	r20, 0x01AB
    16fc:	50 91 ac 01 	lds	r21, 0x01AC
    1700:	80 91 a0 01 	lds	r24, 0x01A0
    1704:	90 91 a1 01 	lds	r25, 0x01A1
    1708:	a0 91 a2 01 	lds	r26, 0x01A2
    170c:	b0 91 a3 01 	lds	r27, 0x01A3
    1710:	28 17       	cp	r18, r24
    1712:	39 07       	cpc	r19, r25
    1714:	4a 07       	cpc	r20, r26
    1716:	5b 07       	cpc	r21, r27
    1718:	b1 f4       	brne	.+44     	; 0x1746 <__vector_11+0xb4>
		{
			TCNT0 = Global_u8Preload;
    171a:	e2 e5       	ldi	r30, 0x52	; 82
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 91 a4 01 	lds	r24, 0x01A4
    1722:	80 83       	st	Z, r24
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
    1724:	e0 91 98 01 	lds	r30, 0x0198
    1728:	f0 91 99 01 	lds	r31, 0x0199
    172c:	80 91 9a 01 	lds	r24, 0x019A
    1730:	90 91 9b 01 	lds	r25, 0x019B
    1734:	09 95       	icall
			Local_u32Counter = 0;
    1736:	10 92 a9 01 	sts	0x01A9, r1
    173a:	10 92 aa 01 	sts	0x01AA, r1
    173e:	10 92 ab 01 	sts	0x01AB, r1
    1742:	10 92 ac 01 	sts	0x01AC, r1
		}
	}
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1776:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
    1778:	af e5       	ldi	r26, 0x5F	; 95
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ef e5       	ldi	r30, 0x5F	; 95
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8f 77       	andi	r24, 0x7F	; 127
    1784:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
    1786:	af e5       	ldi	r26, 0x5F	; 95
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ef e5       	ldi	r30, 0x5F	; 95
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
}
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	0f 92       	push	r0
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    17ac:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<< GIE_I);
    17ae:	af e5       	ldi	r26, 0x5F	; 95
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e5       	ldi	r30, 0x5F	; 95
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 77       	andi	r24, 0x7F	; 127
    17ba:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};
void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

// fun to initialize the external interrupt take pointer to  id of interrupt

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	2d 97       	sbiw	r28, 0x0d	; 13
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	9d 83       	std	Y+5, r25	; 0x05
    17e0:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    17e2:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pstrEXTIConfig!=NULL){
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	09 f4       	brne	.+2      	; 0x17ee <EXTI_enuInit+0x24>
    17ec:	10 c1       	rjmp	.+544    	; 0x1a0e <EXTI_enuInit+0x244>
		u8 Local_u8Iter=0;
    17ee:	1a 82       	std	Y+2, r1	; 0x02
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    17f0:	1a 82       	std	Y+2, r1	; 0x02
    17f2:	08 c1       	rjmp	.+528    	; 0x1a04 <EXTI_enuInit+0x23a>
    {
    	if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ENABLE)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 01       	movw	r18, r24
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	fc 01       	movw	r30, r24
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	80 81       	ld	r24, Z
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	09 f0       	breq	.+2      	; 0x1812 <EXTI_enuInit+0x48>
    1810:	f6 c0       	rjmp	.+492    	; 0x19fe <EXTI_enuInit+0x234>
    	{
    		switch (Local_u8Iter)
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3d 87       	std	Y+13, r19	; 0x0d
    181a:	2c 87       	std	Y+12, r18	; 0x0c
    181c:	8c 85       	ldd	r24, Y+12	; 0x0c
    181e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <EXTI_enuInit+0x5e>
    1826:	60 c0       	rjmp	.+192    	; 0x18e8 <EXTI_enuInit+0x11e>
    1828:	2c 85       	ldd	r18, Y+12	; 0x0c
    182a:	3d 85       	ldd	r19, Y+13	; 0x0d
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <EXTI_enuInit+0x6a>
    1832:	af c0       	rjmp	.+350    	; 0x1992 <EXTI_enuInit+0x1c8>
    1834:	8c 85       	ldd	r24, Y+12	; 0x0c
    1836:	9d 85       	ldd	r25, Y+13	; 0x0d
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	09 f0       	breq	.+2      	; 0x183e <EXTI_enuInit+0x74>
    183c:	de c0       	rjmp	.+444    	; 0x19fa <EXTI_enuInit+0x230>
    						{
    		case INT0:
    			 MCUCR &=~ (3<<0);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8c 7f       	andi	r24, 0xFC	; 252
    184a:	8c 93       	st	X, r24
    			 GICR|=(1<<6);
    184c:	ab e5       	ldi	r26, 0x5B	; 91
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e5       	ldi	r30, 0x5B	; 91
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 01       	movw	r18, r24
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	fc 01       	movw	r30, r24
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	81 81       	ldd	r24, Z+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3b 87       	std	Y+11, r19	; 0x0b
    1878:	2a 87       	std	Y+10, r18	; 0x0a
    187a:	8a 85       	ldd	r24, Y+10	; 0x0a
    187c:	9b 85       	ldd	r25, Y+11	; 0x0b
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	f9 f0       	breq	.+62     	; 0x18c2 <EXTI_enuInit+0xf8>
    1884:	2a 85       	ldd	r18, Y+10	; 0x0a
    1886:	3b 85       	ldd	r19, Y+11	; 0x0b
    1888:	23 30       	cpi	r18, 0x03	; 3
    188a:	31 05       	cpc	r19, r1
    188c:	34 f4       	brge	.+12     	; 0x189a <EXTI_enuInit+0xd0>
    188e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1890:	9b 85       	ldd	r25, Y+11	; 0x0b
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	e9 f0       	breq	.+58     	; 0x18d2 <EXTI_enuInit+0x108>
    1898:	24 c0       	rjmp	.+72     	; 0x18e2 <EXTI_enuInit+0x118>
    189a:	2a 85       	ldd	r18, Y+10	; 0x0a
    189c:	3b 85       	ldd	r19, Y+11	; 0x0b
    189e:	23 30       	cpi	r18, 0x03	; 3
    18a0:	31 05       	cpc	r19, r1
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <EXTI_enuInit+0xe8>
    18a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <EXTI_enuInit+0xe6>
    18ae:	a7 c0       	rjmp	.+334    	; 0x19fe <EXTI_enuInit+0x234>
    18b0:	18 c0       	rjmp	.+48     	; 0x18e2 <EXTI_enuInit+0x118>
    			{
                     case LOW_LEVEL:
                    	 break;
                     case ANY_LOGIC:
                    	 MCUCR |=(1<<0);
    18b2:	a5 e5       	ldi	r26, 0x55	; 85
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e5       	ldi	r30, 0x55	; 85
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	81 60       	ori	r24, 0x01	; 1
    18be:	8c 93       	st	X, r24
    18c0:	9e c0       	rjmp	.+316    	; 0x19fe <EXTI_enuInit+0x234>
                    	 break;
                     case FALLING_EDGE:
                    	 MCUCR |=(1<<1);
    18c2:	a5 e5       	ldi	r26, 0x55	; 85
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e5       	ldi	r30, 0x55	; 85
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	82 60       	ori	r24, 0x02	; 2
    18ce:	8c 93       	st	X, r24
    18d0:	96 c0       	rjmp	.+300    	; 0x19fe <EXTI_enuInit+0x234>
                    	 break;
                     case RISING_EDGE:
                    	 MCUCR |=(3<<0);
    18d2:	a5 e5       	ldi	r26, 0x55	; 85
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e5       	ldi	r30, 0x55	; 85
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	83 60       	ori	r24, 0x03	; 3
    18de:	8c 93       	st	X, r24
    18e0:	8e c0       	rjmp	.+284    	; 0x19fe <EXTI_enuInit+0x234>
                    	 break;
                    default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	8b 83       	std	Y+3, r24	; 0x03
    18e6:	8b c0       	rjmp	.+278    	; 0x19fe <EXTI_enuInit+0x234>
					}
					break;

    		case INT1:
    			MCUCR &=~ (3<<2);
    18e8:	a5 e5       	ldi	r26, 0x55	; 85
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e5       	ldi	r30, 0x55	; 85
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	83 7f       	andi	r24, 0xF3	; 243
    18f4:	8c 93       	st	X, r24
    			GICR |= (1<<7);
    18f6:	ab e5       	ldi	r26, 0x5B	; 91
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e5       	ldi	r30, 0x5B	; 91
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9c 01       	movw	r18, r24
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	fc 01       	movw	r30, r24
    1916:	e2 0f       	add	r30, r18
    1918:	f3 1f       	adc	r31, r19
    191a:	81 81       	ldd	r24, Z+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	39 87       	std	Y+9, r19	; 0x09
    1922:	28 87       	std	Y+8, r18	; 0x08
    1924:	88 85       	ldd	r24, Y+8	; 0x08
    1926:	99 85       	ldd	r25, Y+9	; 0x09
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	91 05       	cpc	r25, r1
    192c:	f9 f0       	breq	.+62     	; 0x196c <EXTI_enuInit+0x1a2>
    192e:	28 85       	ldd	r18, Y+8	; 0x08
    1930:	39 85       	ldd	r19, Y+9	; 0x09
    1932:	23 30       	cpi	r18, 0x03	; 3
    1934:	31 05       	cpc	r19, r1
    1936:	34 f4       	brge	.+12     	; 0x1944 <EXTI_enuInit+0x17a>
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	91 05       	cpc	r25, r1
    1940:	e9 f0       	breq	.+58     	; 0x197c <EXTI_enuInit+0x1b2>
    1942:	24 c0       	rjmp	.+72     	; 0x198c <EXTI_enuInit+0x1c2>
    1944:	28 85       	ldd	r18, Y+8	; 0x08
    1946:	39 85       	ldd	r19, Y+9	; 0x09
    1948:	23 30       	cpi	r18, 0x03	; 3
    194a:	31 05       	cpc	r19, r1
    194c:	39 f0       	breq	.+14     	; 0x195c <EXTI_enuInit+0x192>
    194e:	88 85       	ldd	r24, Y+8	; 0x08
    1950:	99 85       	ldd	r25, Y+9	; 0x09
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <EXTI_enuInit+0x190>
    1958:	52 c0       	rjmp	.+164    	; 0x19fe <EXTI_enuInit+0x234>
    195a:	18 c0       	rjmp	.+48     	; 0x198c <EXTI_enuInit+0x1c2>
    			{
    	         case LOW_LEVEL:
    	        	 break;
    	         case ANY_LOGIC:
    	        	 MCUCR |=(1<<2);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	84 60       	ori	r24, 0x04	; 4
    1968:	8c 93       	st	X, r24
    196a:	49 c0       	rjmp	.+146    	; 0x19fe <EXTI_enuInit+0x234>
    	        	 break;

    	         case FALLING_EDGE:
    	        	 MCUCR |=(1<<3);
    196c:	a5 e5       	ldi	r26, 0x55	; 85
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e5       	ldi	r30, 0x55	; 85
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	88 60       	ori	r24, 0x08	; 8
    1978:	8c 93       	st	X, r24
    197a:	41 c0       	rjmp	.+130    	; 0x19fe <EXTI_enuInit+0x234>
    	        	 break;

    	         case RISING_EDGE:
    	        	 MCUCR |=(3<<2);
    197c:	a5 e5       	ldi	r26, 0x55	; 85
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e5       	ldi	r30, 0x55	; 85
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8c 60       	ori	r24, 0x0C	; 12
    1988:	8c 93       	st	X, r24
    198a:	39 c0       	rjmp	.+114    	; 0x19fe <EXTI_enuInit+0x234>
    	        	 break;

    	        default:
    				Local_enuErrorState = ES_OUT_OF_RANGE;
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	36 c0       	rjmp	.+108    	; 0x19fe <EXTI_enuInit+0x234>
    			}
    			break;

    		case INT2:
    			MCUCSR &=~(1<<6);
    1992:	a4 e5       	ldi	r26, 0x54	; 84
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e4 e5       	ldi	r30, 0x54	; 84
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 7b       	andi	r24, 0xBF	; 191
    199e:	8c 93       	st	X, r24
    			GICR |= (1<<5);
    19a0:	ab e5       	ldi	r26, 0x5B	; 91
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	eb e5       	ldi	r30, 0x5B	; 91
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 62       	ori	r24, 0x20	; 32
    19ac:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9c 01       	movw	r18, r24
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	9d 81       	ldd	r25, Y+5	; 0x05
    19be:	fc 01       	movw	r30, r24
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	81 81       	ldd	r24, Z+1	; 0x01
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	3f 83       	std	Y+7, r19	; 0x07
    19cc:	2e 83       	std	Y+6, r18	; 0x06
    19ce:	8e 81       	ldd	r24, Y+6	; 0x06
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	91 05       	cpc	r25, r1
    19d6:	31 f0       	breq	.+12     	; 0x19e4 <EXTI_enuInit+0x21a>
    19d8:	2e 81       	ldd	r18, Y+6	; 0x06
    19da:	3f 81       	ldd	r19, Y+7	; 0x07
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	31 05       	cpc	r19, r1
    19e0:	71 f0       	breq	.+28     	; 0x19fe <EXTI_enuInit+0x234>
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <EXTI_enuInit+0x22a>
    		   	{
                 case FALLING_EDGE:
                	 break;

                 case RISING_EDGE:
                	 MCUCSR |= (1<<6);
    19e4:	a4 e5       	ldi	r26, 0x54	; 84
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e4 e5       	ldi	r30, 0x54	; 84
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 64       	ori	r24, 0x40	; 64
    19f0:	8c 93       	st	X, r24
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <EXTI_enuInit+0x234>
                	 break;

                default:
  			    Local_enuErrorState = ES_OUT_OF_RANGE;
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <EXTI_enuInit+0x234>
  		        }
  		        break;

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	8b 83       	std	Y+3, r24	; 0x03

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig!=NULL){
		u8 Local_u8Iter=0;
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <EXTI_enuInit+0x242>
    1a0a:	f4 ce       	rjmp	.-536    	; 0x17f4 <EXTI_enuInit+0x2a>
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <EXTI_enuInit+0x248>

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    						}}}}
	else {
		ES_t Local_enuErrorState = ES_NULL_POINTER;
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a14:	2d 96       	adiw	r28, 0x0d	; 13
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <EXTI_enuSetSenseLevel>:


/*** fun to set sense level
     take id ,sense level                              ***/
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel){
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1a3e:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_u8EXTI_ID < 3){
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <EXTI_enuSetSenseLevel+0x22>
    1a46:	ba c0       	rjmp	.+372    	; 0x1bbc <EXTI_enuSetSenseLevel+0x196>
	 if(Copy_u8EXTI_ID ==INT0){
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <EXTI_enuSetSenseLevel+0x2a>
    1a4e:	43 c0       	rjmp	.+134    	; 0x1ad6 <EXTI_enuSetSenseLevel+0xb0>
		 MCUCR &=~ (3<<0);
    1a50:	a5 e5       	ldi	r26, 0x55	; 85
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e5       	ldi	r30, 0x55	; 85
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8c 7f       	andi	r24, 0xFC	; 252
    1a5c:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3a 87       	std	Y+10, r19	; 0x0a
    1a66:	29 87       	std	Y+9, r18	; 0x09
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	91 05       	cpc	r25, r1
    1a70:	f9 f0       	breq	.+62     	; 0x1ab0 <EXTI_enuSetSenseLevel+0x8a>
    1a72:	29 85       	ldd	r18, Y+9	; 0x09
    1a74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a76:	23 30       	cpi	r18, 0x03	; 3
    1a78:	31 05       	cpc	r19, r1
    1a7a:	34 f4       	brge	.+12     	; 0x1a88 <EXTI_enuSetSenseLevel+0x62>
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	e9 f0       	breq	.+58     	; 0x1ac0 <EXTI_enuSetSenseLevel+0x9a>
    1a86:	24 c0       	rjmp	.+72     	; 0x1ad0 <EXTI_enuSetSenseLevel+0xaa>
    1a88:	29 85       	ldd	r18, Y+9	; 0x09
    1a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a8c:	23 30       	cpi	r18, 0x03	; 3
    1a8e:	31 05       	cpc	r19, r1
    1a90:	39 f0       	breq	.+14     	; 0x1aa0 <EXTI_enuSetSenseLevel+0x7a>
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	84 30       	cpi	r24, 0x04	; 4
    1a98:	91 05       	cpc	r25, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <EXTI_enuSetSenseLevel+0x78>
    1a9c:	91 c0       	rjmp	.+290    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
    1a9e:	18 c0       	rjmp	.+48     	; 0x1ad0 <EXTI_enuSetSenseLevel+0xaa>
		    			{
		                     case LOW_LEVEL:
		                    	 break;
		                     case ANY_LOGIC:
		                    	 MCUCR |=(1<<0);
    1aa0:	a5 e5       	ldi	r26, 0x55	; 85
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e5 e5       	ldi	r30, 0x55	; 85
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	81 60       	ori	r24, 0x01	; 1
    1aac:	8c 93       	st	X, r24
    1aae:	88 c0       	rjmp	.+272    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case FALLING_EDGE:
		                    	 MCUCR |=(1<<1);
    1ab0:	a5 e5       	ldi	r26, 0x55	; 85
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e5 e5       	ldi	r30, 0x55	; 85
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	8c 93       	st	X, r24
    1abe:	80 c0       	rjmp	.+256    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case RISING_EDGE:
		                    	 MCUCR |=(3<<0);
    1ac0:	a5 e5       	ldi	r26, 0x55	; 85
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e5       	ldi	r30, 0x55	; 85
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	83 60       	ori	r24, 0x03	; 3
    1acc:	8c 93       	st	X, r24
    1ace:	78 c0       	rjmp	.+240    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                    default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	75 c0       	rjmp	.+234    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
							}
	 }
	 else if(Copy_u8EXTI_ID ==INT1){
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	09 f0       	breq	.+2      	; 0x1ade <EXTI_enuSetSenseLevel+0xb8>
    1adc:	43 c0       	rjmp	.+134    	; 0x1b64 <EXTI_enuSetSenseLevel+0x13e>
		 MCUCR &=~ (3<<2);
    1ade:	a5 e5       	ldi	r26, 0x55	; 85
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e5       	ldi	r30, 0x55	; 85
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	83 7f       	andi	r24, 0xF3	; 243
    1aea:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	38 87       	std	Y+8, r19	; 0x08
    1af4:	2f 83       	std	Y+7, r18	; 0x07
    1af6:	8f 81       	ldd	r24, Y+7	; 0x07
    1af8:	98 85       	ldd	r25, Y+8	; 0x08
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	91 05       	cpc	r25, r1
    1afe:	f9 f0       	breq	.+62     	; 0x1b3e <EXTI_enuSetSenseLevel+0x118>
    1b00:	2f 81       	ldd	r18, Y+7	; 0x07
    1b02:	38 85       	ldd	r19, Y+8	; 0x08
    1b04:	23 30       	cpi	r18, 0x03	; 3
    1b06:	31 05       	cpc	r19, r1
    1b08:	34 f4       	brge	.+12     	; 0x1b16 <EXTI_enuSetSenseLevel+0xf0>
    1b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0c:	98 85       	ldd	r25, Y+8	; 0x08
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	e9 f0       	breq	.+58     	; 0x1b4e <EXTI_enuSetSenseLevel+0x128>
    1b14:	24 c0       	rjmp	.+72     	; 0x1b5e <EXTI_enuSetSenseLevel+0x138>
    1b16:	2f 81       	ldd	r18, Y+7	; 0x07
    1b18:	38 85       	ldd	r19, Y+8	; 0x08
    1b1a:	23 30       	cpi	r18, 0x03	; 3
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	39 f0       	breq	.+14     	; 0x1b2e <EXTI_enuSetSenseLevel+0x108>
    1b20:	8f 81       	ldd	r24, Y+7	; 0x07
    1b22:	98 85       	ldd	r25, Y+8	; 0x08
    1b24:	84 30       	cpi	r24, 0x04	; 4
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <EXTI_enuSetSenseLevel+0x106>
    1b2a:	4a c0       	rjmp	.+148    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
    1b2c:	18 c0       	rjmp	.+48     	; 0x1b5e <EXTI_enuSetSenseLevel+0x138>
		     			{
		     	         case LOW_LEVEL:
		     	        	 break;
		     	         case ANY_LOGIC:
		     	        	 MCUCR |=(1<<2);
    1b2e:	a5 e5       	ldi	r26, 0x55	; 85
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e5       	ldi	r30, 0x55	; 85
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	84 60       	ori	r24, 0x04	; 4
    1b3a:	8c 93       	st	X, r24
    1b3c:	41 c0       	rjmp	.+130    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case FALLING_EDGE:
		     	        	 MCUCR |=(1<<3);
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 60       	ori	r24, 0x08	; 8
    1b4a:	8c 93       	st	X, r24
    1b4c:	39 c0       	rjmp	.+114    	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case RISING_EDGE:
		     	        	 MCUCR |=(3<<2);
    1b4e:	a5 e5       	ldi	r26, 0x55	; 85
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e5 e5       	ldi	r30, 0x55	; 85
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8c 60       	ori	r24, 0x0C	; 12
    1b5a:	8c 93       	st	X, r24
    1b5c:	31 c0       	rjmp	.+98     	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	        default:
		     				Local_enuErrorState = ES_OUT_OF_RANGE;
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    1b62:	2e c0       	rjmp	.+92     	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		     			}
	 }
	 else if(Copy_u8EXTI_ID ==INT2){
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	59 f5       	brne	.+86     	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		 MCUCSR &=~(1<<6);
    1b6a:	a4 e5       	ldi	r26, 0x54	; 84
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e4 e5       	ldi	r30, 0x54	; 84
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8f 7b       	andi	r24, 0xBF	; 191
    1b76:	8c 93       	st	X, r24
		     			GICR |= (1<<5);
    1b78:	ab e5       	ldi	r26, 0x5B	; 91
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e5       	ldi	r30, 0x5B	; 91
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 62       	ori	r24, 0x20	; 32
    1b84:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3e 83       	std	Y+6, r19	; 0x06
    1b8e:	2d 83       	std	Y+5, r18	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	31 f0       	breq	.+12     	; 0x1ba6 <EXTI_enuSetSenseLevel+0x180>
    1b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	71 f0       	breq	.+28     	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <EXTI_enuSetSenseLevel+0x190>
		     		   	{
		                  case FALLING_EDGE:
		                 	 break;

		                  case RISING_EDGE:
		                 	 MCUCSR |= (1<<6);
    1ba6:	a4 e5       	ldi	r26, 0x54	; 84
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e4 e5       	ldi	r30, 0x54	; 84
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	8c 93       	st	X, r24
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		                 	 break;

		                 default:
		   			    Local_enuErrorState = ES_OUT_OF_RANGE;
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <EXTI_enuSetSenseLevel+0x19a>
		   		        }
		 }
 }
 else{
	 ES_t Local_enuErrorState = ES_OUT_OF_RANGE;
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_enuErrorState;
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bc2:	2a 96       	adiw	r28, 0x0a	; 10
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <EXTI_enuEnableINT>:

/*** fun to enable specific the interrupt
                      ***/
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID){
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <EXTI_enuEnableINT+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1be0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	00 f5       	brcc	.+64     	; 0x1c28 <EXTI_enuEnableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 23       	and	r24, r24
    1bec:	41 f4       	brne	.+16     	; 0x1bfe <EXTI_enuEnableINT+0x2a>
			{
				GICR |= (1<<6);
    1bee:	ab e5       	ldi	r26, 0x5B	; 91
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	eb e5       	ldi	r30, 0x5B	; 91
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 64       	ori	r24, 0x40	; 64
    1bfa:	8c 93       	st	X, r24
    1bfc:	15 c0       	rjmp	.+42     	; 0x1c28 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <EXTI_enuEnableINT+0x40>
			{
				GICR |= (1<<7);
    1c04:	ab e5       	ldi	r26, 0x5B	; 91
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e5       	ldi	r30, 0x5B	; 91
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	8c 93       	st	X, r24
    1c12:	0a c0       	rjmp	.+20     	; 0x1c28 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	39 f4       	brne	.+14     	; 0x1c28 <EXTI_enuEnableINT+0x54>
			{
				GICR |= (1<<5);
    1c1a:	ab e5       	ldi	r26, 0x5B	; 91
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	eb e5       	ldi	r30, 0x5B	; 91
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <EXTI_enuDisableINT>:

/***   fun to disable specific interrupt
                      ***/
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID){
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <EXTI_enuDisableINT+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c40:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	00 f5       	brcc	.+64     	; 0x1c88 <EXTI_enuDisableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 23       	and	r24, r24
    1c4c:	41 f4       	brne	.+16     	; 0x1c5e <EXTI_enuDisableINT+0x2a>
			{
				GICR &= ~(1<<6);
    1c4e:	ab e5       	ldi	r26, 0x5B	; 91
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	eb e5       	ldi	r30, 0x5B	; 91
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8f 7b       	andi	r24, 0xBF	; 191
    1c5a:	8c 93       	st	X, r24
    1c5c:	15 c0       	rjmp	.+42     	; 0x1c88 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <EXTI_enuDisableINT+0x40>
			{
				GICR&= ~(1<<7);
    1c64:	ab e5       	ldi	r26, 0x5B	; 91
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	eb e5       	ldi	r30, 0x5B	; 91
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8f 77       	andi	r24, 0x7F	; 127
    1c70:	8c 93       	st	X, r24
    1c72:	0a c0       	rjmp	.+20     	; 0x1c88 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	39 f4       	brne	.+14     	; 0x1c88 <EXTI_enuDisableINT+0x54>
			{
				GICR &= ~(1<<5);
    1c7a:	ab e5       	ldi	r26, 0x5B	; 91
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e5       	ldi	r30, 0x5B	; 91
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 7d       	andi	r24, 0xDF	; 223
    1c86:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <EXTI_enuCallBack>:

 /***  call back fun to use function that exist in application level
                          ***/

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) , volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <EXTI_enuCallBack+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <EXTI_enuCallBack+0x8>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <EXTI_enuCallBack+0xa>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9b 83       	std	Y+3, r25	; 0x03
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	7d 83       	std	Y+5, r23	; 0x05
    1ca8:	6c 83       	std	Y+4, r22	; 0x04
    1caa:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1cac:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	d9 f0       	breq	.+54     	; 0x1cec <EXTI_enuCallBack+0x58>
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	c0 f4       	brcc	.+48     	; 0x1cec <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e3 55       	subi	r30, 0x53	; 83
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	fc 01       	movw	r30, r24
    1ce0:	ed 54       	subi	r30, 0x4D	; 77
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	26 96       	adiw	r28, 0x06	; 6
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <__vector_1>:



ISR(VECT_INT0)
{
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    1d2a:	80 91 ad 01 	lds	r24, 0x01AD
    1d2e:	90 91 ae 01 	lds	r25, 0x01AE
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	49 f0       	breq	.+18     	; 0x1d48 <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    1d36:	e0 91 ad 01 	lds	r30, 0x01AD
    1d3a:	f0 91 ae 01 	lds	r31, 0x01AE
    1d3e:	80 91 b3 01 	lds	r24, 0x01B3
    1d42:	90 91 b4 01 	lds	r25, 0x01B4
    1d46:	09 95       	icall
	}
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_2>:

ISR(VECT_INT1)
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	2f 93       	push	r18
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	5f 93       	push	r21
    1d80:	6f 93       	push	r22
    1d82:	7f 93       	push	r23
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	af 93       	push	r26
    1d8a:	bf 93       	push	r27
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    1d98:	80 91 af 01 	lds	r24, 0x01AF
    1d9c:	90 91 b0 01 	lds	r25, 0x01B0
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	49 f0       	breq	.+18     	; 0x1db6 <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    1da4:	e0 91 af 01 	lds	r30, 0x01AF
    1da8:	f0 91 b0 01 	lds	r31, 0x01B0
    1dac:	80 91 b5 01 	lds	r24, 0x01B5
    1db0:	90 91 b6 01 	lds	r25, 0x01B6
    1db4:	09 95       	icall
	}
}
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <__vector_3>:

ISR(VECT_INT2)
{
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    1e06:	80 91 b1 01 	lds	r24, 0x01B1
    1e0a:	90 91 b2 01 	lds	r25, 0x01B2
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	49 f0       	breq	.+18     	; 0x1e24 <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    1e12:	e0 91 b1 01 	lds	r30, 0x01B1
    1e16:	f0 91 b2 01 	lds	r31, 0x01B2
    1e1a:	80 91 b7 01 	lds	r24, 0x01B7
    1e1e:	90 91 b8 01 	lds	r25, 0x01B8
    1e22:	09 95       	icall
	}
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	ff 91       	pop	r31
    1e2a:	ef 91       	pop	r30
    1e2c:	bf 91       	pop	r27
    1e2e:	af 91       	pop	r26
    1e30:	9f 91       	pop	r25
    1e32:	8f 91       	pop	r24
    1e34:	7f 91       	pop	r23
    1e36:	6f 91       	pop	r22
    1e38:	5f 91       	pop	r21
    1e3a:	4f 91       	pop	r20
    1e3c:	3f 91       	pop	r19
    1e3e:	2f 91       	pop	r18
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	0f 90       	pop	r0
    1e46:	1f 90       	pop	r1
    1e48:	18 95       	reti

00001e4a <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e54:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1e56:	ea e3       	ldi	r30, 0x3A	; 58
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1e5e:	e7 e3       	ldi	r30, 0x37	; 55
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1e66:	e4 e3       	ldi	r30, 0x34	; 52
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8d ec       	ldi	r24, 0xCD	; 205
    1e6c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1e6e:	e1 e3       	ldi	r30, 0x31	; 49
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8d ec       	ldi	r24, 0xCD	; 205
    1e74:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1e76:	eb e3       	ldi	r30, 0x3B	; 59
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1e7c:	e8 e3       	ldi	r30, 0x38	; 56
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	89 e8       	ldi	r24, 0x89	; 137
    1e82:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	89 e2       	ldi	r24, 0x29	; 41
    1e8a:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	89 e2       	ldi	r24, 0x29	; 41
    1e92:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <DIO_enuSetPortDirection+0x6>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <DIO_enuSetPortDirection+0x8>
    1eaa:	0f 92       	push	r0
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
    1eb2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1eb4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	a8 f5       	brcc	.+106    	; 0x1f26 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3d 83       	std	Y+5, r19	; 0x05
    1ec4:	2c 83       	std	Y+4, r18	; 0x04
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <DIO_enuSetPortDirection+0x62>
    1ed0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <DIO_enuSetPortDirection+0x42>
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <DIO_enuSetPortDirection+0x58>
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <DIO_enuSetPortDirection+0x7e>
    1ee4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <DIO_enuSetPortDirection+0x6c>
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <DIO_enuSetPortDirection+0x76>
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    1efa:	ea e3       	ldi	r30, 0x3A	; 58
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	80 83       	st	Z, r24
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
    1f04:	e7 e3       	ldi	r30, 0x37	; 55
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	80 83       	st	Z, r24
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
    1f0e:	e4 e3       	ldi	r30, 0x34	; 52
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	80 83       	st	Z, r24
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <DIO_enuSetPortVal+0x6>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <DIO_enuSetPortVal+0x8>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f4e:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	84 30       	cpi	r24, 0x04	; 4
    1f54:	a8 f5       	brcc	.+106    	; 0x1fc0 <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	3d 83       	std	Y+5, r19	; 0x05
    1f5e:	2c 83       	std	Y+4, r18	; 0x04
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	9d 81       	ldd	r25, Y+5	; 0x05
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	91 05       	cpc	r25, r1
    1f68:	d1 f0       	breq	.+52     	; 0x1f9e <DIO_enuSetPortVal+0x62>
    1f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <DIO_enuSetPortVal+0x42>
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	9d 81       	ldd	r25, Y+5	; 0x05
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <DIO_enuSetPortVal+0x58>
    1f7c:	1e c0       	rjmp	.+60     	; 0x1fba <DIO_enuSetPortVal+0x7e>
    1f7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f80:	3d 81       	ldd	r19, Y+5	; 0x05
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <DIO_enuSetPortVal+0x6c>
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	81 f0       	breq	.+32     	; 0x1fb2 <DIO_enuSetPortVal+0x76>
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
    1f94:	eb e3       	ldi	r30, 0x3B	; 59
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	80 83       	st	Z, r24
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
    1f9e:	e8 e3       	ldi	r30, 0x38	; 56
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	80 83       	st	Z, r24
    1fa6:	09 c0       	rjmp	.+18     	; 0x1fba <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	80 83       	st	Z, r24
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
    1fb2:	e2 e3       	ldi	r30, 0x32	; 50
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <DIO_enuGetPortVal+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <DIO_enuGetPortVal+0x8>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <DIO_enuGetPortVal+0xa>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	7c 83       	std	Y+4, r23	; 0x04
    1fe8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1fea:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <DIO_enuGetPortVal+0x20>
    1ff4:	43 c0       	rjmp	.+134    	; 0x207c <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	e8 f5       	brcc	.+122    	; 0x2076 <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	3e 83       	std	Y+6, r19	; 0x06
    2004:	2d 83       	std	Y+5, r18	; 0x05
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	91 05       	cpc	r25, r1
    200e:	e1 f0       	breq	.+56     	; 0x2048 <DIO_enuGetPortVal+0x72>
    2010:	2d 81       	ldd	r18, Y+5	; 0x05
    2012:	3e 81       	ldd	r19, Y+6	; 0x06
    2014:	22 30       	cpi	r18, 0x02	; 2
    2016:	31 05       	cpc	r19, r1
    2018:	2c f4       	brge	.+10     	; 0x2024 <DIO_enuGetPortVal+0x4e>
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	61 f0       	breq	.+24     	; 0x203a <DIO_enuGetPortVal+0x64>
    2022:	26 c0       	rjmp	.+76     	; 0x2070 <DIO_enuGetPortVal+0x9a>
    2024:	2d 81       	ldd	r18, Y+5	; 0x05
    2026:	3e 81       	ldd	r19, Y+6	; 0x06
    2028:	22 30       	cpi	r18, 0x02	; 2
    202a:	31 05       	cpc	r19, r1
    202c:	a1 f0       	breq	.+40     	; 0x2056 <DIO_enuGetPortVal+0x80>
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	83 30       	cpi	r24, 0x03	; 3
    2034:	91 05       	cpc	r25, r1
    2036:	b1 f0       	breq	.+44     	; 0x2064 <DIO_enuGetPortVal+0x8e>
    2038:	1b c0       	rjmp	.+54     	; 0x2070 <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA; //PINA is a reg not pin
    203a:	e9 e3       	ldi	r30, 0x39	; 57
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	eb 81       	ldd	r30, Y+3	; 0x03
    2042:	fc 81       	ldd	r31, Y+4	; 0x04
    2044:	80 83       	st	Z, r24
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
    2048:	e6 e3       	ldi	r30, 0x36	; 54
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	80 83       	st	Z, r24
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
    2056:	e3 e3       	ldi	r30, 0x33	; 51
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	eb 81       	ldd	r30, Y+3	; 0x03
    205e:	fc 81       	ldd	r31, Y+4	; 0x04
    2060:	80 83       	st	Z, r24
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
    2064:	e0 e3       	ldi	r30, 0x30	; 48
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	eb 81       	ldd	r30, Y+3	; 0x03
    206c:	fc 81       	ldd	r31, Y+4	; 0x04
    206e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
    2080:	89 81       	ldd	r24, Y+1	; 0x01


}
    2082:	26 96       	adiw	r28, 0x06	; 6
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <DIO_enuTogPortVal+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <DIO_enuTogPortVal+0x8>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    20a2:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <DIO_enuTogPortVal+0x18>
    20aa:	41 c0       	rjmp	.+130    	; 0x212e <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3c 83       	std	Y+4, r19	; 0x04
    20b4:	2b 83       	std	Y+3, r18	; 0x03
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	e9 f0       	breq	.+58     	; 0x20fa <DIO_enuTogPortVal+0x66>
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <DIO_enuTogPortVal+0x40>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	61 f0       	breq	.+24     	; 0x20ea <DIO_enuTogPortVal+0x56>
    20d2:	2a c0       	rjmp	.+84     	; 0x2128 <DIO_enuTogPortVal+0x94>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	b1 f0       	breq	.+44     	; 0x210a <DIO_enuTogPortVal+0x76>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	c9 f0       	breq	.+50     	; 0x211a <DIO_enuTogPortVal+0x86>
    20e8:	1f c0       	rjmp	.+62     	; 0x2128 <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
    20ea:	ab e3       	ldi	r26, 0x3B	; 59
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	eb e3       	ldi	r30, 0x3B	; 59
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 95       	com	r24
    20f6:	8c 93       	st	X, r24
    20f8:	17 c0       	rjmp	.+46     	; 0x2128 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
    20fa:	a8 e3       	ldi	r26, 0x38	; 56
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e8 e3       	ldi	r30, 0x38	; 56
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 95       	com	r24
    2106:	8c 93       	st	X, r24
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	80 95       	com	r24
    2116:	8c 93       	st	X, r24
    2118:	07 c0       	rjmp	.+14     	; 0x2128 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
    211a:	a2 e3       	ldi	r26, 0x32	; 50
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e2 e3       	ldi	r30, 0x32	; 50
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	80 95       	com	r24
    2126:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    2132:	89 81       	ldd	r24, Y+1	; 0x01

}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <DIO_enuSetPinDirection+0x6>
    2148:	00 d0       	rcall	.+0      	; 0x214a <DIO_enuSetPinDirection+0x8>
    214a:	00 d0       	rcall	.+0      	; 0x214c <DIO_enuSetPinDirection+0xa>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	6b 83       	std	Y+3, r22	; 0x03
    2154:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2156:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	08 f0       	brcs	.+2      	; 0x2160 <DIO_enuSetPinDirection+0x1e>
    215e:	d1 c0       	rjmp	.+418    	; 0x2302 <DIO_enuSetPinDirection+0x1c0>
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	88 30       	cpi	r24, 0x08	; 8
    2164:	08 f0       	brcs	.+2      	; 0x2168 <DIO_enuSetPinDirection+0x26>
    2166:	cd c0       	rjmp	.+410    	; 0x2302 <DIO_enuSetPinDirection+0x1c0>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	08 f0       	brcs	.+2      	; 0x2170 <DIO_enuSetPinDirection+0x2e>
    216e:	c9 c0       	rjmp	.+402    	; 0x2302 <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3e 83       	std	Y+6, r19	; 0x06
    2178:	2d 83       	std	Y+5, r18	; 0x05
    217a:	6d 81       	ldd	r22, Y+5	; 0x05
    217c:	7e 81       	ldd	r23, Y+6	; 0x06
    217e:	61 30       	cpi	r22, 0x01	; 1
    2180:	71 05       	cpc	r23, r1
    2182:	09 f4       	brne	.+2      	; 0x2186 <DIO_enuSetPinDirection+0x44>
    2184:	41 c0       	rjmp	.+130    	; 0x2208 <DIO_enuSetPinDirection+0xc6>
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	91 05       	cpc	r25, r1
    218e:	34 f4       	brge	.+12     	; 0x219c <DIO_enuSetPinDirection+0x5a>
    2190:	2d 81       	ldd	r18, Y+5	; 0x05
    2192:	3e 81       	ldd	r19, Y+6	; 0x06
    2194:	21 15       	cp	r18, r1
    2196:	31 05       	cpc	r19, r1
    2198:	71 f0       	breq	.+28     	; 0x21b6 <DIO_enuSetPinDirection+0x74>
    219a:	b0 c0       	rjmp	.+352    	; 0x22fc <DIO_enuSetPinDirection+0x1ba>
    219c:	6d 81       	ldd	r22, Y+5	; 0x05
    219e:	7e 81       	ldd	r23, Y+6	; 0x06
    21a0:	62 30       	cpi	r22, 0x02	; 2
    21a2:	71 05       	cpc	r23, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <DIO_enuSetPinDirection+0x66>
    21a6:	59 c0       	rjmp	.+178    	; 0x225a <DIO_enuSetPinDirection+0x118>
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	91 05       	cpc	r25, r1
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <DIO_enuSetPinDirection+0x72>
    21b2:	7c c0       	rjmp	.+248    	; 0x22ac <DIO_enuSetPinDirection+0x16a>
    21b4:	a3 c0       	rjmp	.+326    	; 0x22fc <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
    21b6:	aa e3       	ldi	r26, 0x3A	; 58
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ea e3       	ldi	r30, 0x3A	; 58
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_enuSetPinDirection+0x90>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	2a 95       	dec	r18
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_enuSetPinDirection+0x8c>
    21d6:	80 95       	com	r24
    21d8:	84 23       	and	r24, r20
    21da:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
    21dc:	aa e3       	ldi	r26, 0x3A	; 58
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ea e3       	ldi	r30, 0x3A	; 58
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	b9 01       	movw	r22, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <DIO_enuSetPinDirection+0xba>
    21f8:	66 0f       	add	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	8a 95       	dec	r24
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <DIO_enuSetPinDirection+0xb6>
    2200:	cb 01       	movw	r24, r22
    2202:	84 2b       	or	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	7a c0       	rjmp	.+244    	; 0x22fc <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
    2208:	a7 e3       	ldi	r26, 0x37	; 55
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e7 e3       	ldi	r30, 0x37	; 55
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <DIO_enuSetPinDirection+0xe2>
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	2a 95       	dec	r18
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <DIO_enuSetPinDirection+0xde>
    2228:	80 95       	com	r24
    222a:	84 23       	and	r24, r20
    222c:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
    222e:	a7 e3       	ldi	r26, 0x37	; 55
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e7 e3       	ldi	r30, 0x37	; 55
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	48 2f       	mov	r20, r24
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	b9 01       	movw	r22, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <DIO_enuSetPinDirection+0x10c>
    224a:	66 0f       	add	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <DIO_enuSetPinDirection+0x108>
    2252:	cb 01       	movw	r24, r22
    2254:	84 2b       	or	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	51 c0       	rjmp	.+162    	; 0x22fc <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
    225a:	a4 e3       	ldi	r26, 0x34	; 52
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e4 e3       	ldi	r30, 0x34	; 52
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_enuSetPinDirection+0x134>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	2a 95       	dec	r18
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_enuSetPinDirection+0x130>
    227a:	80 95       	com	r24
    227c:	84 23       	and	r24, r20
    227e:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
    2280:	a4 e3       	ldi	r26, 0x34	; 52
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e4 e3       	ldi	r30, 0x34	; 52
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	b9 01       	movw	r22, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <DIO_enuSetPinDirection+0x15e>
    229c:	66 0f       	add	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	8a 95       	dec	r24
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <DIO_enuSetPinDirection+0x15a>
    22a4:	cb 01       	movw	r24, r22
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	28 c0       	rjmp	.+80     	; 0x22fc <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
    22ac:	a1 e3       	ldi	r26, 0x31	; 49
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e1 e3       	ldi	r30, 0x31	; 49
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <DIO_enuSetPinDirection+0x186>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	2a 95       	dec	r18
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <DIO_enuSetPinDirection+0x182>
    22cc:	80 95       	com	r24
    22ce:	84 23       	and	r24, r20
    22d0:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
    22d2:	a1 e3       	ldi	r26, 0x31	; 49
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e1 e3       	ldi	r30, 0x31	; 49
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	b9 01       	movw	r22, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_enuSetPinDirection+0x1b0>
    22ee:	66 0f       	add	r22, r22
    22f0:	77 1f       	adc	r23, r23
    22f2:	8a 95       	dec	r24
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_enuSetPinDirection+0x1ac>
    22f6:	cb 01       	movw	r24, r22
    22f8:	84 2b       	or	r24, r20
    22fa:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    2306:	89 81       	ldd	r24, Y+1	; 0x01

}
    2308:	26 96       	adiw	r28, 0x06	; 6
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <DIO_enuSetPinVal+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <DIO_enuSetPinVal+0x8>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <DIO_enuSetPinVal+0xa>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	8a 83       	std	Y+2, r24	; 0x02
    232a:	6b 83       	std	Y+3, r22	; 0x03
    232c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    232e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= HIGH){
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	84 30       	cpi	r24, 0x04	; 4
    2334:	08 f0       	brcs	.+2      	; 0x2338 <DIO_enuSetPinVal+0x1e>
    2336:	d1 c0       	rjmp	.+418    	; 0x24da <DIO_enuSetPinVal+0x1c0>
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	88 30       	cpi	r24, 0x08	; 8
    233c:	08 f0       	brcs	.+2      	; 0x2340 <DIO_enuSetPinVal+0x26>
    233e:	cd c0       	rjmp	.+410    	; 0x24da <DIO_enuSetPinVal+0x1c0>
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	82 30       	cpi	r24, 0x02	; 2
    2344:	08 f0       	brcs	.+2      	; 0x2348 <DIO_enuSetPinVal+0x2e>
    2346:	c9 c0       	rjmp	.+402    	; 0x24da <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	3e 83       	std	Y+6, r19	; 0x06
    2350:	2d 83       	std	Y+5, r18	; 0x05
    2352:	6d 81       	ldd	r22, Y+5	; 0x05
    2354:	7e 81       	ldd	r23, Y+6	; 0x06
    2356:	61 30       	cpi	r22, 0x01	; 1
    2358:	71 05       	cpc	r23, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <DIO_enuSetPinVal+0x44>
    235c:	41 c0       	rjmp	.+130    	; 0x23e0 <DIO_enuSetPinVal+0xc6>
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	91 05       	cpc	r25, r1
    2366:	34 f4       	brge	.+12     	; 0x2374 <DIO_enuSetPinVal+0x5a>
    2368:	2d 81       	ldd	r18, Y+5	; 0x05
    236a:	3e 81       	ldd	r19, Y+6	; 0x06
    236c:	21 15       	cp	r18, r1
    236e:	31 05       	cpc	r19, r1
    2370:	71 f0       	breq	.+28     	; 0x238e <DIO_enuSetPinVal+0x74>
    2372:	b0 c0       	rjmp	.+352    	; 0x24d4 <DIO_enuSetPinVal+0x1ba>
    2374:	6d 81       	ldd	r22, Y+5	; 0x05
    2376:	7e 81       	ldd	r23, Y+6	; 0x06
    2378:	62 30       	cpi	r22, 0x02	; 2
    237a:	71 05       	cpc	r23, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <DIO_enuSetPinVal+0x66>
    237e:	59 c0       	rjmp	.+178    	; 0x2432 <DIO_enuSetPinVal+0x118>
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	91 05       	cpc	r25, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <DIO_enuSetPinVal+0x72>
    238a:	7c c0       	rjmp	.+248    	; 0x2484 <DIO_enuSetPinVal+0x16a>
    238c:	a3 c0       	rjmp	.+326    	; 0x24d4 <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
    238e:	ab e3       	ldi	r26, 0x3B	; 59
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	eb e3       	ldi	r30, 0x3B	; 59
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_enuSetPinVal+0x90>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	2a 95       	dec	r18
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_enuSetPinVal+0x8c>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	b9 01       	movw	r22, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <DIO_enuSetPinVal+0xba>
    23d0:	66 0f       	add	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	8a 95       	dec	r24
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <DIO_enuSetPinVal+0xb6>
    23d8:	cb 01       	movw	r24, r22
    23da:	84 2b       	or	r24, r20
    23dc:	8c 93       	st	X, r24
    23de:	7a c0       	rjmp	.+244    	; 0x24d4 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
    23e0:	a8 e3       	ldi	r26, 0x38	; 56
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e8 e3       	ldi	r30, 0x38	; 56
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <DIO_enuSetPinVal+0xe2>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	2a 95       	dec	r18
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <DIO_enuSetPinVal+0xde>
    2400:	80 95       	com	r24
    2402:	84 23       	and	r24, r20
    2404:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
    2406:	a8 e3       	ldi	r26, 0x38	; 56
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e8 e3       	ldi	r30, 0x38	; 56
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	48 2f       	mov	r20, r24
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	b9 01       	movw	r22, r18
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <DIO_enuSetPinVal+0x10c>
    2422:	66 0f       	add	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	8a 95       	dec	r24
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <DIO_enuSetPinVal+0x108>
    242a:	cb 01       	movw	r24, r22
    242c:	84 2b       	or	r24, r20
    242e:	8c 93       	st	X, r24
    2430:	51 c0       	rjmp	.+162    	; 0x24d4 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
    2432:	a5 e3       	ldi	r26, 0x35	; 53
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e3       	ldi	r30, 0x35	; 53
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 c0       	rjmp	.+4      	; 0x244e <DIO_enuSetPinVal+0x134>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	2a 95       	dec	r18
    2450:	e2 f7       	brpl	.-8      	; 0x244a <DIO_enuSetPinVal+0x130>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
    2458:	a5 e3       	ldi	r26, 0x35	; 53
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e5 e3       	ldi	r30, 0x35	; 53
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	b9 01       	movw	r22, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DIO_enuSetPinVal+0x15e>
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	8a 95       	dec	r24
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <DIO_enuSetPinVal+0x15a>
    247c:	cb 01       	movw	r24, r22
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	28 c0       	rjmp	.+80     	; 0x24d4 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
    2484:	a2 e3       	ldi	r26, 0x32	; 50
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e2 e3       	ldi	r30, 0x32	; 50
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <DIO_enuSetPinVal+0x186>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	2a 95       	dec	r18
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <DIO_enuSetPinVal+0x182>
    24a4:	80 95       	com	r24
    24a6:	84 23       	and	r24, r20
    24a8:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
    24aa:	a2 e3       	ldi	r26, 0x32	; 50
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e2 e3       	ldi	r30, 0x32	; 50
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	48 2f       	mov	r20, r24
    24b6:	8c 81       	ldd	r24, Y+4	; 0x04
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b9 01       	movw	r22, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_enuSetPinVal+0x1b0>
    24c6:	66 0f       	add	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	8a 95       	dec	r24
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <DIO_enuSetPinVal+0x1ac>
    24ce:	cb 01       	movw	r24, r22
    24d0:	84 2b       	or	r24, r20
    24d2:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e0:	26 96       	adiw	r28, 0x06	; 6
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	27 97       	sbiw	r28, 0x07	; 7
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	6b 83       	std	Y+3, r22	; 0x03
    250a:	5d 83       	std	Y+5, r21	; 0x05
    250c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    250e:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	09 f4       	brne	.+2      	; 0x251a <DIO_enuGetPinVal+0x28>
    2518:	7a c0       	rjmp	.+244    	; 0x260e <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	84 30       	cpi	r24, 0x04	; 4
    251e:	08 f0       	brcs	.+2      	; 0x2522 <DIO_enuGetPinVal+0x30>
    2520:	73 c0       	rjmp	.+230    	; 0x2608 <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	3f 83       	std	Y+7, r19	; 0x07
    252a:	2e 83       	std	Y+6, r18	; 0x06
    252c:	4e 81       	ldd	r20, Y+6	; 0x06
    252e:	5f 81       	ldd	r21, Y+7	; 0x07
    2530:	41 30       	cpi	r20, 0x01	; 1
    2532:	51 05       	cpc	r21, r1
    2534:	59 f1       	breq	.+86     	; 0x258c <DIO_enuGetPinVal+0x9a>
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	9f 81       	ldd	r25, Y+7	; 0x07
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	91 05       	cpc	r25, r1
    253e:	34 f4       	brge	.+12     	; 0x254c <DIO_enuGetPinVal+0x5a>
    2540:	2e 81       	ldd	r18, Y+6	; 0x06
    2542:	3f 81       	ldd	r19, Y+7	; 0x07
    2544:	21 15       	cp	r18, r1
    2546:	31 05       	cpc	r19, r1
    2548:	69 f0       	breq	.+26     	; 0x2564 <DIO_enuGetPinVal+0x72>
    254a:	5b c0       	rjmp	.+182    	; 0x2602 <DIO_enuGetPinVal+0x110>
    254c:	4e 81       	ldd	r20, Y+6	; 0x06
    254e:	5f 81       	ldd	r21, Y+7	; 0x07
    2550:	42 30       	cpi	r20, 0x02	; 2
    2552:	51 05       	cpc	r21, r1
    2554:	79 f1       	breq	.+94     	; 0x25b4 <DIO_enuGetPinVal+0xc2>
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	83 30       	cpi	r24, 0x03	; 3
    255c:	91 05       	cpc	r25, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <DIO_enuGetPinVal+0x70>
    2560:	3d c0       	rjmp	.+122    	; 0x25dc <DIO_enuGetPinVal+0xea>
    2562:	4f c0       	rjmp	.+158    	; 0x2602 <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
    2564:	e9 e3       	ldi	r30, 0x39	; 57
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a9 01       	movw	r20, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_enuGetPinVal+0x8a>
    2578:	55 95       	asr	r21
    257a:	47 95       	ror	r20
    257c:	8a 95       	dec	r24
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_enuGetPinVal+0x86>
    2580:	ca 01       	movw	r24, r20
    2582:	81 70       	andi	r24, 0x01	; 1
    2584:	ec 81       	ldd	r30, Y+4	; 0x04
    2586:	fd 81       	ldd	r31, Y+5	; 0x05
    2588:	80 83       	st	Z, r24
    258a:	3b c0       	rjmp	.+118    	; 0x2602 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
    258c:	e6 e3       	ldi	r30, 0x36	; 54
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a9 01       	movw	r20, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <DIO_enuGetPinVal+0xb2>
    25a0:	55 95       	asr	r21
    25a2:	47 95       	ror	r20
    25a4:	8a 95       	dec	r24
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <DIO_enuGetPinVal+0xae>
    25a8:	ca 01       	movw	r24, r20
    25aa:	81 70       	andi	r24, 0x01	; 1
    25ac:	ec 81       	ldd	r30, Y+4	; 0x04
    25ae:	fd 81       	ldd	r31, Y+5	; 0x05
    25b0:	80 83       	st	Z, r24
    25b2:	27 c0       	rjmp	.+78     	; 0x2602 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
    25b4:	e3 e3       	ldi	r30, 0x33	; 51
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a9 01       	movw	r20, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <DIO_enuGetPinVal+0xda>
    25c8:	55 95       	asr	r21
    25ca:	47 95       	ror	r20
    25cc:	8a 95       	dec	r24
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <DIO_enuGetPinVal+0xd6>
    25d0:	ca 01       	movw	r24, r20
    25d2:	81 70       	andi	r24, 0x01	; 1
    25d4:	ec 81       	ldd	r30, Y+4	; 0x04
    25d6:	fd 81       	ldd	r31, Y+5	; 0x05
    25d8:	80 83       	st	Z, r24
    25da:	13 c0       	rjmp	.+38     	; 0x2602 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
    25dc:	e0 e3       	ldi	r30, 0x30	; 48
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a9 01       	movw	r20, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_enuGetPinVal+0x102>
    25f0:	55 95       	asr	r21
    25f2:	47 95       	ror	r20
    25f4:	8a 95       	dec	r24
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_enuGetPinVal+0xfe>
    25f8:	ca 01       	movw	r24, r20
    25fa:	81 70       	andi	r24, 0x01	; 1
    25fc:	ec 81       	ldd	r30, Y+4	; 0x04
    25fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2600:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	05 c0       	rjmp	.+10     	; 0x2612 <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
    2612:	89 81       	ldd	r24, Y+1	; 0x01


}
    2614:	27 96       	adiw	r28, 0x07	; 7
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	00 d0       	rcall	.+0      	; 0x262c <DIO_enuTogPinVal+0x6>
    262c:	00 d0       	rcall	.+0      	; 0x262e <DIO_enuTogPinVal+0x8>
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2638:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	08 f0       	brcs	.+2      	; 0x2642 <DIO_enuTogPinVal+0x1c>
    2640:	75 c0       	rjmp	.+234    	; 0x272c <DIO_enuTogPinVal+0x106>
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	88 30       	cpi	r24, 0x08	; 8
    2646:	08 f0       	brcs	.+2      	; 0x264a <DIO_enuTogPinVal+0x24>
    2648:	71 c0       	rjmp	.+226    	; 0x272c <DIO_enuTogPinVal+0x106>
				{
					switch(Copy_u8PortID)
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	3d 83       	std	Y+5, r19	; 0x05
    2652:	2c 83       	std	Y+4, r18	; 0x04
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	9d 81       	ldd	r25, Y+5	; 0x05
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	91 05       	cpc	r25, r1
    265c:	49 f1       	breq	.+82     	; 0x26b0 <DIO_enuTogPinVal+0x8a>
    265e:	2c 81       	ldd	r18, Y+4	; 0x04
    2660:	3d 81       	ldd	r19, Y+5	; 0x05
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	31 05       	cpc	r19, r1
    2666:	2c f4       	brge	.+10     	; 0x2672 <DIO_enuTogPinVal+0x4c>
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	61 f0       	breq	.+24     	; 0x2688 <DIO_enuTogPinVal+0x62>
    2670:	5a c0       	rjmp	.+180    	; 0x2726 <DIO_enuTogPinVal+0x100>
    2672:	2c 81       	ldd	r18, Y+4	; 0x04
    2674:	3d 81       	ldd	r19, Y+5	; 0x05
    2676:	22 30       	cpi	r18, 0x02	; 2
    2678:	31 05       	cpc	r19, r1
    267a:	71 f1       	breq	.+92     	; 0x26d8 <DIO_enuTogPinVal+0xb2>
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	83 30       	cpi	r24, 0x03	; 3
    2682:	91 05       	cpc	r25, r1
    2684:	e9 f1       	breq	.+122    	; 0x2700 <DIO_enuTogPinVal+0xda>
    2686:	4f c0       	rjmp	.+158    	; 0x2726 <DIO_enuTogPinVal+0x100>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
    2688:	ab e3       	ldi	r26, 0x3B	; 59
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	eb e3       	ldi	r30, 0x3B	; 59
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	48 2f       	mov	r20, r24
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 2e       	mov	r0, r18
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <DIO_enuTogPinVal+0x80>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	0a 94       	dec	r0
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <DIO_enuTogPinVal+0x7c>
    26aa:	84 27       	eor	r24, r20
    26ac:	8c 93       	st	X, r24
    26ae:	3b c0       	rjmp	.+118    	; 0x2726 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
    26b0:	a8 e3       	ldi	r26, 0x38	; 56
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e8 e3       	ldi	r30, 0x38	; 56
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	48 2f       	mov	r20, r24
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 2e       	mov	r0, r18
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <DIO_enuTogPinVal+0xa8>
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	0a 94       	dec	r0
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <DIO_enuTogPinVal+0xa4>
    26d2:	84 27       	eor	r24, r20
    26d4:	8c 93       	st	X, r24
    26d6:	27 c0       	rjmp	.+78     	; 0x2726 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
    26d8:	a5 e3       	ldi	r26, 0x35	; 53
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e5 e3       	ldi	r30, 0x35	; 53
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	48 2f       	mov	r20, r24
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	02 2e       	mov	r0, r18
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <DIO_enuTogPinVal+0xd0>
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	0a 94       	dec	r0
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <DIO_enuTogPinVal+0xcc>
    26fa:	84 27       	eor	r24, r20
    26fc:	8c 93       	st	X, r24
    26fe:	13 c0       	rjmp	.+38     	; 0x2726 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
    2700:	a2 e3       	ldi	r26, 0x32	; 50
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e2 e3       	ldi	r30, 0x32	; 50
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	48 2f       	mov	r20, r24
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	02 2e       	mov	r0, r18
    2718:	02 c0       	rjmp	.+4      	; 0x271e <DIO_enuTogPinVal+0xf8>
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	0a 94       	dec	r0
    2720:	e2 f7       	brpl	.-8      	; 0x271a <DIO_enuTogPinVal+0xf4>
    2722:	84 27       	eor	r24, r20
    2724:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <DIO_enuTogPinVal+0x10a>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    2730:	89 81       	ldd	r24, Y+1	; 0x01

	}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <ADC_enuInit>:
#include"ADC_Config.h"
#include"../interrupt.h"

static volatile void (*ADC_PFuncISRFunc)(void *) = NULL;
static volatile void *ADC_PvidISRParameter = NULL;
ES_t ADC_enuInit(void){
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    274c:	19 82       	std	Y+1, r1	; 0x01

	ADMUX&=0x3F; //mask two bits of ADC_VREF (BIT6,7)
    274e:	a7 e2       	ldi	r26, 0x27	; 39
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e7 e2       	ldi	r30, 0x27	; 39
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	8f 73       	andi	r24, 0x3F	; 63
    275a:	8c 93       	st	X, r24
//VREF
#if   ADC_VREF==AVCC
	  ADMUX|=(MASK_BIT<<BIT6);
    275c:	a7 e2       	ldi	r26, 0x27	; 39
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e7 e2       	ldi	r30, 0x27	; 39
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	80 64       	ori	r24, 0x40	; 64
    2768:	8c 93       	st	X, r24
	  ADMUX|=0xC0;
#else
#error "ADC_VREF has a wrong selection"
#endif
 //CHOOSE ADJUSTMENT
	ADMUX &= ~(MASK_BIT <<BIT5);
    276a:	a7 e2       	ldi	r26, 0x27	; 39
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e7 e2       	ldi	r30, 0x27	; 39
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8f 7d       	andi	r24, 0xDF	; 223
    2776:	8c 93       	st	X, r24
#if   ADC_ADJUST==RIGHT_ADJUST
	   ADMUX&=~(MASK_BIT<<BIT5);
    2778:	a7 e2       	ldi	r26, 0x27	; 39
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e7 e2       	ldi	r30, 0x27	; 39
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	8f 7d       	andi	r24, 0xDF	; 223
    2784:	8c 93       	st	X, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif

 //CHOOSE ADC_prescaler
		 ADCSRA &= 0xF8; //mask the first 3 bits in this register
    2786:	a6 e2       	ldi	r26, 0x26	; 38
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e6 e2       	ldi	r30, 0x26	; 38
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	88 7f       	andi	r24, 0xF8	; 248
    2792:	8c 93       	st	X, r24
#if   ADC_PRESCALER==DIVISION_FACTOR_2
		 ADCSRA &= 0xF8;
#elif ADC_PRESCALER==DIVISION_FACTOR_4
		 ADCSRA |=(MASK_BIT<<BIT2);
#elif ADC_PRESCALER==DIVISION_FACTOR_8
		 ADCSRA |=(MASK_BIT<<BIT0);
    2794:	a6 e2       	ldi	r26, 0x26	; 38
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e6 e2       	ldi	r30, 0x26	; 38
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	81 60       	ori	r24, 0x01	; 1
    27a0:	8c 93       	st	X, r24
		 ADCSRA |=(MASK_BIT<<BIT1);
    27a2:	a6 e2       	ldi	r26, 0x26	; 38
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e6 e2       	ldi	r30, 0x26	; 38
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	82 60       	ori	r24, 0x02	; 2
    27ae:	8c 93       	st	X, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif


	return Local_enuErrorState ;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <ADC_enuEnable>:
ES_t ADC_enuEnable(void){
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	0f 92       	push	r0
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    27c4:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(MASK_BIT<<BIT7);
    27c6:	a6 e2       	ldi	r26, 0x26	; 38
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e6 e2       	ldi	r30, 0x26	; 38
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	80 68       	ori	r24, 0x80	; 128
    27d2:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <ADC_enuDisable>:
ES_t ADC_enuDisable(void){
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    27e8:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA &=~(MASK_BIT<<BIT7);
    27ea:	a6 e2       	ldi	r26, 0x26	; 38
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e6 e2       	ldi	r30, 0x26	; 38
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 77       	andi	r24, 0x7F	; 127
    27f6:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <ADC_enuStartConversion>:
ES_t ADC_enuStartConversion(void){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	0f 92       	push	r0
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    280c:	19 82       	std	Y+1, r1	; 0x01
		 ADCSRA |=(MASK_BIT<<BIT6);
    280e:	a6 e2       	ldi	r26, 0x26	; 38
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e6 e2       	ldi	r30, 0x26	; 38
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 64       	ori	r24, 0x40	; 64
    281a:	8c 93       	st	X, r24
		return Local_enuErrorState ;
    281c:	89 81       	ldd	r24, Y+1	; 0x01
}
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <ADC_enuSelectChannel>:
ES_t ADC_enuSelectChannel(u8 Copy_Channel_ID){
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <ADC_enuSelectChannel+0x6>
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    2832:	19 82       	std	Y+1, r1	; 0x01
ADMUX&=0xF0; //mask the first 4 bits
    2834:	a7 e2       	ldi	r26, 0x27	; 39
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e7 e2       	ldi	r30, 0x27	; 39
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	80 7f       	andi	r24, 0xF0	; 240
    2840:	8c 93       	st	X, r24
ADMUX|=Copy_Channel_ID ;
    2842:	a7 e2       	ldi	r26, 0x27	; 39
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e7 e2       	ldi	r30, 0x27	; 39
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	90 81       	ld	r25, Z
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	89 2b       	or	r24, r25
    2850:	8c 93       	st	X, r24
return Local_enuErrorState ;
    2852:	89 81       	ldd	r24, Y+1	; 0x01

}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <ADC_enuPollingSystem>:
ES_t ADC_enuPollingSystem(void){
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	0f 92       	push	r0
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    2868:	19 82       	std	Y+1, r1	; 0x01

		while(!((ADCSRA >> BIT4) & MASK_BIT)); //Busy Wait until flag is set
    286a:	e6 e2       	ldi	r30, 0x26	; 38
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	82 95       	swap	r24
    2872:	8f 70       	andi	r24, 0x0F	; 15
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	81 70       	andi	r24, 0x01	; 1
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a9 f3       	breq	.-22     	; 0x286a <ADC_enuPollingSystem+0xc>


		ADCSRA |= (MASK_BIT << BIT4); //Clear flag
    2880:	a6 e2       	ldi	r26, 0x26	; 38
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e6 e2       	ldi	r30, 0x26	; 38
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	80 61       	ori	r24, 0x10	; 16
    288c:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <ADC_enuReadHighValue>:
ES_t ADC_enuReadHighValue(u8* Copy_pu8Value){
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	00 d0       	rcall	.+0      	; 0x289e <ADC_enuReadHighValue+0x6>
    289e:	0f 92       	push	r0
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	9b 83       	std	Y+3, r25	; 0x03
    28a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    28a8:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJUST==LEFT_ADJUST
	 *Copy_pu8Value=ADCH;
#elif ADC_ADJUST==RIGHT_ADJUST
	 *Copy_pu8Value=(ADCL>>2);
    28aa:	e4 e2       	ldi	r30, 0x24	; 36
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	86 95       	lsr	r24
    28b2:	86 95       	lsr	r24
    28b4:	ea 81       	ldd	r30, Y+2	; 0x02
    28b6:	fb 81       	ldd	r31, Y+3	; 0x03
    28b8:	80 83       	st	Z, r24
	 *Copy_pu8Value|=(ADCH<<6);
    28ba:	ea 81       	ldd	r30, Y+2	; 0x02
    28bc:	fb 81       	ldd	r31, Y+3	; 0x03
    28be:	80 81       	ld	r24, Z
    28c0:	28 2f       	mov	r18, r24
    28c2:	e5 e2       	ldi	r30, 0x25	; 37
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	00 24       	eor	r0, r0
    28ce:	96 95       	lsr	r25
    28d0:	87 95       	ror	r24
    28d2:	07 94       	ror	r0
    28d4:	96 95       	lsr	r25
    28d6:	87 95       	ror	r24
    28d8:	07 94       	ror	r0
    28da:	98 2f       	mov	r25, r24
    28dc:	80 2d       	mov	r24, r0
    28de:	82 2b       	or	r24, r18
    28e0:	ea 81       	ldd	r30, Y+2	; 0x02
    28e2:	fb 81       	ldd	r31, Y+3	; 0x03
    28e4:	80 83       	st	Z, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif
	return Local_enuErrorState ;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <ADC_enuReadValue>:
ES_t ADC_enuReadValue(u16* Copy_pu16Value){
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <ADC_enuReadValue+0x6>
    28fa:	0f 92       	push	r0
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	9b 83       	std	Y+3, r25	; 0x03
    2902:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    2904:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJUST==LEFT_ADJUST
	*Copy_pu16ReadValue  = ((u16)ADCL >> 6);
	*Copy_pu16ReadValue |= ((u16)ADCH << 2);
#elif ADC_ADJUST==RIGHT_ADJUST
	*Copy_pu16Value=((u16)ADCL);
    2906:	e4 e2       	ldi	r30, 0x24	; 36
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	ea 81       	ldd	r30, Y+2	; 0x02
    2912:	fb 81       	ldd	r31, Y+3	; 0x03
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	80 83       	st	Z, r24
	*Copy_pu16Value|=((u16)ADCH<<8);
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	20 81       	ld	r18, Z
    291e:	31 81       	ldd	r19, Z+1	; 0x01
    2920:	e5 e2       	ldi	r30, 0x25	; 37
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	98 2f       	mov	r25, r24
    292c:	88 27       	eor	r24, r24
    292e:	82 2b       	or	r24, r18
    2930:	93 2b       	or	r25, r19
    2932:	ea 81       	ldd	r30, Y+2	; 0x02
    2934:	fb 81       	ldd	r31, Y+3	; 0x03
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif
	return Local_enuErrorState ;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <ADC_enuEnableTriggerMode>:

ES_t ADC_enuEnableTriggerMode(u8 Copy_u8TriggerSource){
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <ADC_enuEnableTriggerMode+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <ADC_enuEnableTriggerMode+0x8>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    2956:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA&=~(MASK_BIT<<BIT5); //Clear bit
    2958:	a6 e2       	ldi	r26, 0x26	; 38
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e6 e2       	ldi	r30, 0x26	; 38
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8f 7d       	andi	r24, 0xDF	; 223
    2964:	8c 93       	st	X, r24
	SFIOR &=0x1F; //Mask The last 3bits
    2966:	a0 e5       	ldi	r26, 0x50	; 80
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e0 e5       	ldi	r30, 0x50	; 80
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8f 71       	andi	r24, 0x1F	; 31
    2972:	8c 93       	st	X, r24
	switch(Copy_u8TriggerSource){
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3c 83       	std	Y+4, r19	; 0x04
    297c:	2b 83       	std	Y+3, r18	; 0x03
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	91 05       	cpc	r25, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <ADC_enuEnableTriggerMode+0x42>
    2988:	71 c0       	rjmp	.+226    	; 0x2a6c <ADC_enuEnableTriggerMode+0x124>
    298a:	2b 81       	ldd	r18, Y+3	; 0x03
    298c:	3c 81       	ldd	r19, Y+4	; 0x04
    298e:	25 30       	cpi	r18, 0x05	; 5
    2990:	31 05       	cpc	r19, r1
    2992:	8c f4       	brge	.+34     	; 0x29b6 <ADC_enuEnableTriggerMode+0x6e>
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	91 05       	cpc	r25, r1
    299c:	d9 f1       	breq	.+118    	; 0x2a14 <ADC_enuEnableTriggerMode+0xcc>
    299e:	2b 81       	ldd	r18, Y+3	; 0x03
    29a0:	3c 81       	ldd	r19, Y+4	; 0x04
    29a2:	23 30       	cpi	r18, 0x03	; 3
    29a4:	31 05       	cpc	r19, r1
    29a6:	0c f0       	brlt	.+2      	; 0x29aa <ADC_enuEnableTriggerMode+0x62>
    29a8:	4b c0       	rjmp	.+150    	; 0x2a40 <ADC_enuEnableTriggerMode+0xf8>
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	9c 81       	ldd	r25, Y+4	; 0x04
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	91 05       	cpc	r25, r1
    29b2:	d1 f0       	breq	.+52     	; 0x29e8 <ADC_enuEnableTriggerMode+0xa0>
    29b4:	c9 c0       	rjmp	.+402    	; 0x2b48 <ADC_enuEnableTriggerMode+0x200>
    29b6:	2b 81       	ldd	r18, Y+3	; 0x03
    29b8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ba:	26 30       	cpi	r18, 0x06	; 6
    29bc:	31 05       	cpc	r19, r1
    29be:	09 f4       	brne	.+2      	; 0x29c2 <ADC_enuEnableTriggerMode+0x7a>
    29c0:	81 c0       	rjmp	.+258    	; 0x2ac4 <ADC_enuEnableTriggerMode+0x17c>
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	86 30       	cpi	r24, 0x06	; 6
    29c8:	91 05       	cpc	r25, r1
    29ca:	0c f4       	brge	.+2      	; 0x29ce <ADC_enuEnableTriggerMode+0x86>
    29cc:	65 c0       	rjmp	.+202    	; 0x2a98 <ADC_enuEnableTriggerMode+0x150>
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	3c 81       	ldd	r19, Y+4	; 0x04
    29d2:	27 30       	cpi	r18, 0x07	; 7
    29d4:	31 05       	cpc	r19, r1
    29d6:	09 f4       	brne	.+2      	; 0x29da <ADC_enuEnableTriggerMode+0x92>
    29d8:	8b c0       	rjmp	.+278    	; 0x2af0 <ADC_enuEnableTriggerMode+0x1a8>
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	88 30       	cpi	r24, 0x08	; 8
    29e0:	91 05       	cpc	r25, r1
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <ADC_enuEnableTriggerMode+0x9e>
    29e4:	9b c0       	rjmp	.+310    	; 0x2b1c <ADC_enuEnableTriggerMode+0x1d4>
    29e6:	b0 c0       	rjmp	.+352    	; 0x2b48 <ADC_enuEnableTriggerMode+0x200>
	case FREE_RUNNING_MODE:
		SFIOR&=~(MASK_BIT<<BIT5);
    29e8:	a0 e5       	ldi	r26, 0x50	; 80
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e0 e5       	ldi	r30, 0x50	; 80
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8f 7d       	andi	r24, 0xDF	; 223
    29f4:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    29f6:	a0 e5       	ldi	r26, 0x50	; 80
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e0 e5       	ldi	r30, 0x50	; 80
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 7b       	andi	r24, 0xBF	; 191
    2a02:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    2a04:	a0 e5       	ldi	r26, 0x50	; 80
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e0 e5       	ldi	r30, 0x50	; 80
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8f 77       	andi	r24, 0x7F	; 127
    2a10:	8c 93       	st	X, r24
    2a12:	9c c0       	rjmp	.+312    	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
    break;
	case ANALOG_COMPARATOR:
		SFIOR|=(MASK_BIT<<BIT5);
    2a14:	a0 e5       	ldi	r26, 0x50	; 80
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e0 e5       	ldi	r30, 0x50	; 80
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 62       	ori	r24, 0x20	; 32
    2a20:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    2a22:	a0 e5       	ldi	r26, 0x50	; 80
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e0 e5       	ldi	r30, 0x50	; 80
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8f 7b       	andi	r24, 0xBF	; 191
    2a2e:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    2a30:	a0 e5       	ldi	r26, 0x50	; 80
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e0 e5       	ldi	r30, 0x50	; 80
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 77       	andi	r24, 0x7F	; 127
    2a3c:	8c 93       	st	X, r24
    2a3e:	86 c0       	rjmp	.+268    	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
    break;
	case EXTI0_TRIG	:
		SFIOR&=~(MASK_BIT<<BIT5);
    2a40:	a0 e5       	ldi	r26, 0x50	; 80
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e0 e5       	ldi	r30, 0x50	; 80
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 7d       	andi	r24, 0xDF	; 223
    2a4c:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    2a4e:	a0 e5       	ldi	r26, 0x50	; 80
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e0 e5       	ldi	r30, 0x50	; 80
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 64       	ori	r24, 0x40	; 64
    2a5a:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    2a5c:	a0 e5       	ldi	r26, 0x50	; 80
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e0 e5       	ldi	r30, 0x50	; 80
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 77       	andi	r24, 0x7F	; 127
    2a68:	8c 93       	st	X, r24
    2a6a:	70 c0       	rjmp	.+224    	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER0_COMPARE_MATCH_TRIG:
		SFIOR|=(MASK_BIT<<BIT5);
    2a6c:	a0 e5       	ldi	r26, 0x50	; 80
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e0 e5       	ldi	r30, 0x50	; 80
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	80 62       	ori	r24, 0x20	; 32
    2a78:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    2a7a:	a0 e5       	ldi	r26, 0x50	; 80
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e0 e5       	ldi	r30, 0x50	; 80
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	80 64       	ori	r24, 0x40	; 64
    2a86:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    2a88:	a0 e5       	ldi	r26, 0x50	; 80
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e0 e5       	ldi	r30, 0x50	; 80
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	8f 77       	andi	r24, 0x7F	; 127
    2a94:	8c 93       	st	X, r24
    2a96:	5a c0       	rjmp	.+180    	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER0_OVERFLOW_TRIG:
		SFIOR&=~(MASK_BIT<<BIT5);
    2a98:	a0 e5       	ldi	r26, 0x50	; 80
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e0 e5       	ldi	r30, 0x50	; 80
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8f 7d       	andi	r24, 0xDF	; 223
    2aa4:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    2aa6:	a0 e5       	ldi	r26, 0x50	; 80
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e0 e5       	ldi	r30, 0x50	; 80
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	8f 7b       	andi	r24, 0xBF	; 191
    2ab2:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    2ab4:	a0 e5       	ldi	r26, 0x50	; 80
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e0 e5       	ldi	r30, 0x50	; 80
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	80 68       	ori	r24, 0x80	; 128
    2ac0:	8c 93       	st	X, r24
    2ac2:	44 c0       	rjmp	.+136    	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_COMPARE_MATCH_TRIG:
		SFIOR|=(MASK_BIT<<BIT5);
    2ac4:	a0 e5       	ldi	r26, 0x50	; 80
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e0 e5       	ldi	r30, 0x50	; 80
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	80 62       	ori	r24, 0x20	; 32
    2ad0:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    2ad2:	a0 e5       	ldi	r26, 0x50	; 80
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e0 e5       	ldi	r30, 0x50	; 80
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	8f 7b       	andi	r24, 0xBF	; 191
    2ade:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    2ae0:	a0 e5       	ldi	r26, 0x50	; 80
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e0 e5       	ldi	r30, 0x50	; 80
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	8c 93       	st	X, r24
    2aee:	2e c0       	rjmp	.+92     	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_OVERFLOW_TRIG	:
		SFIOR&=~(MASK_BIT<<BIT5);
    2af0:	a0 e5       	ldi	r26, 0x50	; 80
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e0 e5       	ldi	r30, 0x50	; 80
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8f 7d       	andi	r24, 0xDF	; 223
    2afc:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    2afe:	a0 e5       	ldi	r26, 0x50	; 80
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e0 e5       	ldi	r30, 0x50	; 80
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	80 64       	ori	r24, 0x40	; 64
    2b0a:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    2b0c:	a0 e5       	ldi	r26, 0x50	; 80
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e0 e5       	ldi	r30, 0x50	; 80
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	80 68       	ori	r24, 0x80	; 128
    2b18:	8c 93       	st	X, r24
    2b1a:	18 c0       	rjmp	.+48     	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_CAPUTRE_TRIG	:
		SFIOR|=(MASK_BIT<<BIT5);
    2b1c:	a0 e5       	ldi	r26, 0x50	; 80
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e0 e5       	ldi	r30, 0x50	; 80
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	80 62       	ori	r24, 0x20	; 32
    2b28:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    2b2a:	a0 e5       	ldi	r26, 0x50	; 80
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e0 e5       	ldi	r30, 0x50	; 80
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	80 64       	ori	r24, 0x40	; 64
    2b36:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    2b38:	a0 e5       	ldi	r26, 0x50	; 80
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e0 e5       	ldi	r30, 0x50	; 80
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 68       	ori	r24, 0x80	; 128
    2b44:	8c 93       	st	X, r24
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <ADC_enuEnableTriggerMode+0x204>
	break;
	default:
	Local_enuErrorState = ES_OUT_OF_RANGE;
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	ADCSRA |= (MASK_BIT << BIT5);                  //set bit for enable trigger
    2b4c:	a6 e2       	ldi	r26, 0x26	; 38
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e6 e2       	ldi	r30, 0x26	; 38
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	80 62       	ori	r24, 0x20	; 32
    2b58:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <ADC_enuDisableTriggerMode>:
ES_t ADC_enuDisableTriggerMode(void){
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	0f 92       	push	r0
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    2b74:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA&=~(MASK_BIT<<BIT5); //Clear bit
    2b76:	a6 e2       	ldi	r26, 0x26	; 38
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e6 e2       	ldi	r30, 0x26	; 38
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 7d       	andi	r24, 0xDF	; 223
    2b82:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <ADC_enuEnableInterruptrMode>:
ES_t ADC_enuEnableInterruptrMode(void){
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	0f 92       	push	r0
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    2b98:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (MASK_BIT <<BIT3);
    2b9a:	a6 e2       	ldi	r26, 0x26	; 38
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e6 e2       	ldi	r30, 0x26	; 38
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <ADC_enuDisableInterruptrMode>:
ES_t ADC_enuDisableInterruptrMode(void){
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	0f 92       	push	r0
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &= ~(MASK_BIT << BIT3);
    2bbe:	a6 e2       	ldi	r26, 0x26	; 38
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e6 e2       	ldi	r30, 0x26	; 38
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	87 7f       	andi	r24, 0xF7	; 247
    2bca:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <ADC_enuCallBack>:
ES_t ADC_enuCallBack(volatile void(*Copy_pfunAppFun)(void*),volatile void*Copy_pviAppParameter)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <ADC_enuCallBack+0x6>
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <ADC_enuCallBack+0x8>
    2bde:	0f 92       	push	r0
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	9b 83       	std	Y+3, r25	; 0x03
    2be6:	8a 83       	std	Y+2, r24	; 0x02
    2be8:	7d 83       	std	Y+5, r23	; 0x05
    2bea:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2bec:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfunAppFun != NULL)
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	69 f0       	breq	.+26     	; 0x2c10 <ADC_enuCallBack+0x3a>
	{
		ADC_PFuncISRFunc = Copy_pfunAppFun;
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfa:	90 93 ba 01 	sts	0x01BA, r25
    2bfe:	80 93 b9 01 	sts	0x01B9, r24
		ADC_PvidISRParameter = Copy_pviAppParameter;
    2c02:	8c 81       	ldd	r24, Y+4	; 0x04
    2c04:	9d 81       	ldd	r25, Y+5	; 0x05
    2c06:	90 93 bc 01 	sts	0x01BC, r25
    2c0a:	80 93 bb 01 	sts	0x01BB, r24
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <ADC_enuCallBack+0x3e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <__vector_16>:

ISR(VECT_ADC)
{
    2c26:	1f 92       	push	r1
    2c28:	0f 92       	push	r0
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	0f 92       	push	r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	2f 93       	push	r18
    2c32:	3f 93       	push	r19
    2c34:	4f 93       	push	r20
    2c36:	5f 93       	push	r21
    2c38:	6f 93       	push	r22
    2c3a:	7f 93       	push	r23
    2c3c:	8f 93       	push	r24
    2c3e:	9f 93       	push	r25
    2c40:	af 93       	push	r26
    2c42:	bf 93       	push	r27
    2c44:	ef 93       	push	r30
    2c46:	ff 93       	push	r31
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PFuncISRFunc != NULL)
    2c50:	80 91 b9 01 	lds	r24, 0x01B9
    2c54:	90 91 ba 01 	lds	r25, 0x01BA
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	49 f0       	breq	.+18     	; 0x2c6e <__vector_16+0x48>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
    2c5c:	e0 91 b9 01 	lds	r30, 0x01B9
    2c60:	f0 91 ba 01 	lds	r31, 0x01BA
    2c64:	80 91 bb 01 	lds	r24, 0x01BB
    2c68:	90 91 bc 01 	lds	r25, 0x01BC
    2c6c:	09 95       	icall
	}
}
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	bf 91       	pop	r27
    2c78:	af 91       	pop	r26
    2c7a:	9f 91       	pop	r25
    2c7c:	8f 91       	pop	r24
    2c7e:	7f 91       	pop	r23
    2c80:	6f 91       	pop	r22
    2c82:	5f 91       	pop	r21
    2c84:	4f 91       	pop	r20
    2c86:	3f 91       	pop	r19
    2c88:	2f 91       	pop	r18
    2c8a:	0f 90       	pop	r0
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	0f 90       	pop	r0
    2c90:	1f 90       	pop	r1
    2c92:	18 95       	reti

00002c94 <Thermistor_enuInit>:
static volatile u16 ADCValue = 0;
static volatile f32 LM35_f32Tempeture = 0;

void LM35_inlvidReadADCValue(void *Copy_PvidLM35VOLT);

ES_t Thermistor_enuInit(Themistor_t* Copy_PstrLM35config){
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <Thermistor_enuInit+0x6>
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <Thermistor_enuInit+0x8>
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ca4:	1a 82       	std	Y+2, r1	; 0x02
	ADC_enuInit();
    2ca6:	0e 94 a1 13 	call	0x2742	; 0x2742 <ADC_enuInit>
	ADC_enuEnableInterruptrMode();
    2caa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <ADC_enuEnableInterruptrMode>
    ADC_enuCallBack(LM35_inlvidReadADCValue,&ADCValue);
    2cae:	8e ec       	ldi	r24, 0xCE	; 206
    2cb0:	96 e1       	ldi	r25, 0x16	; 22
    2cb2:	2d eb       	ldi	r18, 0xBD	; 189
    2cb4:	31 e0       	ldi	r19, 0x01	; 1
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <ADC_enuCallBack>
GIE_enuGloable_Interrupt_Enable();
    2cbc:	0e 94 b6 0b 	call	0x176c	; 0x176c <GIE_enuGloable_Interrupt_Enable>

u8 Local_u8Iterrator = 0;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35NUM; Local_u8Iterrator++)
    2cc2:	19 82       	std	Y+1, r1	; 0x01
    2cc4:	5d c0       	rjmp	.+186    	; 0x2d80 <Thermistor_enuInit+0xec>
	{
		if(Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel != NOTCONNECTED)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 01       	movw	r18, r24
    2cce:	22 0f       	add	r18, r18
    2cd0:	33 1f       	adc	r19, r19
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	e2 0f       	add	r30, r18
    2cda:	f3 1f       	adc	r31, r19
    2cdc:	80 81       	ld	r24, Z
    2cde:	87 30       	cpi	r24, 0x07	; 7
    2ce0:	f9 f0       	breq	.+62     	; 0x2d20 <Thermistor_enuInit+0x8c>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel, DIO_u8INPUT);
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9c 01       	movw	r18, r24
    2cea:	22 0f       	add	r18, r18
    2cec:	33 1f       	adc	r19, r19
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	90 81       	ld	r25, Z
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	69 2f       	mov	r22, r25
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	9c 01       	movw	r18, r24
    2d0c:	22 0f       	add	r18, r18
    2d0e:	33 1f       	adc	r19, r19
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	80 81       	ld	r24, Z
    2d1c:	0e 94 13 14 	call	0x2826	; 0x2826 <ADC_enuSelectChannel>
		}

		if(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel != NOTCONNECTED)
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9c 01       	movw	r18, r24
    2d28:	22 0f       	add	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	81 81       	ldd	r24, Z+1	; 0x01
    2d38:	87 30       	cpi	r24, 0x07	; 7
    2d3a:	f9 f0       	breq	.+62     	; 0x2d7a <Thermistor_enuInit+0xe6>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel, DIO_u8INPUT);
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c 01       	movw	r18, r24
    2d44:	22 0f       	add	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	69 2f       	mov	r22, r25
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel);
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9c 01       	movw	r18, r24
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	81 81       	ldd	r24, Z+1	; 0x01
    2d76:	0e 94 13 14 	call	0x2826	; 0x2826 <ADC_enuSelectChannel>
	ADC_enuEnableInterruptrMode();
    ADC_enuCallBack(LM35_inlvidReadADCValue,&ADCValue);
GIE_enuGloable_Interrupt_Enable();

u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35NUM; Local_u8Iterrator++)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	8f 5f       	subi	r24, 0xFF	; 255
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	88 23       	and	r24, r24
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <Thermistor_enuInit+0xf4>
    2d86:	9f cf       	rjmp	.-194    	; 0x2cc6 <Thermistor_enuInit+0x32>
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel, DIO_u8INPUT);
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel);
		}
	}

	ADC_enuEnable();
    2d88:	0e 94 dd 13 	call	0x27ba	; 0x27ba <ADC_enuEnable>
	return Local_enuErrorState;
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <LM35_inlvidReadADCValue>:

void LM35_inlvidReadADCValue(void *Copy_PvidLM35VOLT){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <LM35_inlvidReadADCValue+0x6>
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PvidLM35VOLT!=NULL){
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	21 f0       	breq	.+8      	; 0x2dba <LM35_inlvidReadADCValue+0x1e>
		ADC_enuReadValue(Copy_PvidLM35VOLT);
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <ADC_enuReadValue>
	}

}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <Themistor_enuGetTemp>:
ES_t Themistor_enuGetTemp(u8 Copy_u8_LM35_ID,u8 *Copy_u8Temp){
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <Themistor_enuGetTemp+0x6>
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <Themistor_enuGetTemp+0x8>
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
    2dd2:	7c 83       	std	Y+4, r23	; 0x04
    2dd4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2dd6:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8Temp != NULL)
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	9c 81       	ldd	r25, Y+4	; 0x04
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	71 f1       	breq	.+92     	; 0x2e3c <Themistor_enuGetTemp+0x78>
		{
			Local_enuErrorState = ADC_enuStartConversion();
    2de0:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_enuStartConversion>
    2de4:	89 83       	std	Y+1, r24	; 0x01
			*Copy_u8Temp = (u8)(((u32)ADCValue *150*5 )/ (1023*1.5));
    2de6:	80 91 bd 01 	lds	r24, 0x01BD
    2dea:	90 91 be 01 	lds	r25, 0x01BE
    2dee:	cc 01       	movw	r24, r24
    2df0:	a0 e0       	ldi	r26, 0x00	; 0
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	2e ee       	ldi	r18, 0xEE	; 238
    2df6:	32 e0       	ldi	r19, 0x02	; 2
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__mulsi3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 ed       	ldi	r19, 0xD0	; 208
    2e1c:	4f eb       	ldi	r20, 0xBF	; 191
    2e1e:	54 e4       	ldi	r21, 0x44	; 68
    2e20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	80 83       	st	Z, r24
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <Themistor_enuGetTemp+0x7c>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LED_enuInit>:
#include "LED_priv.h"

#include "../../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LED_enuInit+0x6>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <LED_enuInit+0x8>
    2e58:	0f 92       	push	r0
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2e62:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pstrLedConfig != NULL)
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <LED_enuInit+0x1e>
    2e6c:	24 c1       	rjmp	.+584    	; 0x30b6 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
    2e6e:	19 82       	std	Y+1, r1	; 0x01
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
    2e70:	19 82       	std	Y+1, r1	; 0x01
    2e72:	1c c1       	rjmp	.+568    	; 0x30ac <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 01       	movw	r18, r24
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	22 0f       	add	r18, r18
    2e82:	33 1f       	adc	r19, r19
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	9c 81       	ldd	r25, Y+4	; 0x04
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	40 81       	ld	r20, Z
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 01       	movw	r18, r24
    2e98:	22 0f       	add	r18, r18
    2e9a:	33 1f       	adc	r19, r19
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	84 2f       	mov	r24, r20
    2eae:	69 2f       	mov	r22, r25
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	22 0f       	add	r18, r18
    2ec2:	33 1f       	adc	r19, r19
    2ec4:	22 0f       	add	r18, r18
    2ec6:	33 1f       	adc	r19, r19
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e2 0f       	add	r30, r18
    2ed0:	f3 1f       	adc	r31, r19
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	82 30       	cpi	r24, 0x02	; 2
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <LED_enuInit+0x8a>
    2ed8:	69 c0       	rjmp	.+210    	; 0x2fac <LED_enuInit+0x15c>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	88 2f       	mov	r24, r24
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	22 0f       	add	r18, r18
    2ee4:	33 1f       	adc	r19, r19
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	83 81       	ldd	r24, Z+3	; 0x03
    2ef6:	81 30       	cpi	r24, 0x01	; 1
    2ef8:	19 f5       	brne	.+70     	; 0x2f40 <LED_enuInit+0xf0>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	88 2f       	mov	r24, r24
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9c 01       	movw	r18, r24
    2f02:	22 0f       	add	r18, r18
    2f04:	33 1f       	adc	r19, r19
    2f06:	22 0f       	add	r18, r18
    2f08:	33 1f       	adc	r19, r19
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	fc 01       	movw	r30, r24
    2f10:	e2 0f       	add	r30, r18
    2f12:	f3 1f       	adc	r31, r19
    2f14:	40 81       	ld	r20, Z
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	22 0f       	add	r18, r18
    2f20:	33 1f       	adc	r19, r19
    2f22:	22 0f       	add	r18, r18
    2f24:	33 1f       	adc	r19, r19
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	e2 0f       	add	r30, r18
    2f2e:	f3 1f       	adc	r31, r19
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	84 2f       	mov	r24, r20
    2f34:	69 2f       	mov	r22, r25
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	b3 c0       	rjmp	.+358    	; 0x30a6 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	88 2f       	mov	r24, r24
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9c 01       	movw	r18, r24
    2f48:	22 0f       	add	r18, r18
    2f4a:	33 1f       	adc	r19, r19
    2f4c:	22 0f       	add	r18, r18
    2f4e:	33 1f       	adc	r19, r19
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	fc 01       	movw	r30, r24
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	83 81       	ldd	r24, Z+3	; 0x03
    2f5c:	88 23       	and	r24, r24
    2f5e:	19 f5       	brne	.+70     	; 0x2fa6 <LED_enuInit+0x156>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9c 01       	movw	r18, r24
    2f68:	22 0f       	add	r18, r18
    2f6a:	33 1f       	adc	r19, r19
    2f6c:	22 0f       	add	r18, r18
    2f6e:	33 1f       	adc	r19, r19
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	fc 01       	movw	r30, r24
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	40 81       	ld	r20, Z
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9c 01       	movw	r18, r24
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	22 0f       	add	r18, r18
    2f8a:	33 1f       	adc	r19, r19
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	fc 01       	movw	r30, r24
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	84 2f       	mov	r24, r20
    2f9a:	69 2f       	mov	r22, r25
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    2fa2:	8a 83       	std	Y+2, r24	; 0x02
    2fa4:	80 c0       	rjmp	.+256    	; 0x30a6 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	89 c0       	rjmp	.+274    	; 0x30be <LED_enuInit+0x26e>
				}
			}
			else if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9c 01       	movw	r18, r24
    2fb4:	22 0f       	add	r18, r18
    2fb6:	33 1f       	adc	r19, r19
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	83 30       	cpi	r24, 0x03	; 3
    2fca:	09 f0       	breq	.+2      	; 0x2fce <LED_enuInit+0x17e>
    2fcc:	69 c0       	rjmp	.+210    	; 0x30a0 <LED_enuInit+0x250>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9c 01       	movw	r18, r24
    2fd6:	22 0f       	add	r18, r18
    2fd8:	33 1f       	adc	r19, r19
    2fda:	22 0f       	add	r18, r18
    2fdc:	33 1f       	adc	r19, r19
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	e2 0f       	add	r30, r18
    2fe6:	f3 1f       	adc	r31, r19
    2fe8:	83 81       	ldd	r24, Z+3	; 0x03
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	19 f5       	brne	.+70     	; 0x3034 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9c 01       	movw	r18, r24
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	22 0f       	add	r18, r18
    2ffc:	33 1f       	adc	r19, r19
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	fc 01       	movw	r30, r24
    3004:	e2 0f       	add	r30, r18
    3006:	f3 1f       	adc	r31, r19
    3008:	40 81       	ld	r20, Z
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	88 2f       	mov	r24, r24
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 01       	movw	r18, r24
    3012:	22 0f       	add	r18, r18
    3014:	33 1f       	adc	r19, r19
    3016:	22 0f       	add	r18, r18
    3018:	33 1f       	adc	r19, r19
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	fc 01       	movw	r30, r24
    3020:	e2 0f       	add	r30, r18
    3022:	f3 1f       	adc	r31, r19
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	84 2f       	mov	r24, r20
    3028:	69 2f       	mov	r22, r25
    302a:	41 e0       	ldi	r20, 0x01	; 1
    302c:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3030:	8a 83       	std	Y+2, r24	; 0x02
    3032:	39 c0       	rjmp	.+114    	; 0x30a6 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	88 2f       	mov	r24, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9c 01       	movw	r18, r24
    303c:	22 0f       	add	r18, r18
    303e:	33 1f       	adc	r19, r19
    3040:	22 0f       	add	r18, r18
    3042:	33 1f       	adc	r19, r19
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	fc 01       	movw	r30, r24
    304a:	e2 0f       	add	r30, r18
    304c:	f3 1f       	adc	r31, r19
    304e:	83 81       	ldd	r24, Z+3	; 0x03
    3050:	88 23       	and	r24, r24
    3052:	19 f5       	brne	.+70     	; 0x309a <LED_enuInit+0x24a>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9c 01       	movw	r18, r24
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	22 0f       	add	r18, r18
    3062:	33 1f       	adc	r19, r19
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	40 81       	ld	r20, Z
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9c 01       	movw	r18, r24
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	fc 01       	movw	r30, r24
    3086:	e2 0f       	add	r30, r18
    3088:	f3 1f       	adc	r31, r19
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	84 2f       	mov	r24, r20
    308e:	69 2f       	mov	r22, r25
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3096:	8a 83       	std	Y+2, r24	; 0x02
    3098:	06 c0       	rjmp	.+12     	; 0x30a6 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    309a:	83 e0       	ldi	r24, 0x03	; 3
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	0f c0       	rjmp	.+30     	; 0x30be <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    30a0:	83 e0       	ldi	r24, 0x03	; 3
    30a2:	8d 83       	std	Y+5, r24	; 0x05
    30a4:	0c c0       	rjmp	.+24     	; 0x30be <LED_enuInit+0x26e>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	89 83       	std	Y+1, r24	; 0x01
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	83 30       	cpi	r24, 0x03	; 3
    30b0:	08 f4       	brcc	.+2      	; 0x30b4 <LED_enuInit+0x264>
    30b2:	e0 ce       	rjmp	.-576    	; 0x2e74 <LED_enuInit+0x24>
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	8d 83       	std	Y+5, r24	; 0x05
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <LED_enuTurnON+0x6>
    30d6:	0f 92       	push	r0
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	9b 83       	std	Y+3, r25	; 0x03
    30de:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    30e0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	29 f1       	breq	.+74     	; 0x3134 <LED_enuTurnON+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
    30ea:	ea 81       	ldd	r30, Y+2	; 0x02
    30ec:	fb 81       	ldd	r31, Y+3	; 0x03
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	82 30       	cpi	r24, 0x02	; 2
    30f2:	61 f4       	brne	.+24     	; 0x310c <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    30f4:	ea 81       	ldd	r30, Y+2	; 0x02
    30f6:	fb 81       	ldd	r31, Y+3	; 0x03
    30f8:	80 81       	ld	r24, Z
    30fa:	ea 81       	ldd	r30, Y+2	; 0x02
    30fc:	fb 81       	ldd	r31, Y+3	; 0x03
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	69 2f       	mov	r22, r25
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	16 c0       	rjmp	.+44     	; 0x3138 <LED_enuTurnON+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
    310c:	ea 81       	ldd	r30, Y+2	; 0x02
    310e:	fb 81       	ldd	r31, Y+3	; 0x03
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	83 30       	cpi	r24, 0x03	; 3
    3114:	61 f4       	brne	.+24     	; 0x312e <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    3116:	ea 81       	ldd	r30, Y+2	; 0x02
    3118:	fb 81       	ldd	r31, Y+3	; 0x03
    311a:	80 81       	ld	r24, Z
    311c:	ea 81       	ldd	r30, Y+2	; 0x02
    311e:	fb 81       	ldd	r31, Y+3	; 0x03
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	69 2f       	mov	r22, r25
    3124:	41 e0       	ldi	r20, 0x01	; 1
    3126:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	05 c0       	rjmp	.+10     	; 0x3138 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    312e:	83 e0       	ldi	r24, 0x03	; 3
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3138:	89 81       	ldd	r24, Y+1	; 0x01
}
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	00 d0       	rcall	.+0      	; 0x314c <LED_enuTurnOFF+0x6>
    314c:	0f 92       	push	r0
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	9b 83       	std	Y+3, r25	; 0x03
    3154:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3156:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	29 f1       	breq	.+74     	; 0x31aa <LED_enuTurnOFF+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
    3160:	ea 81       	ldd	r30, Y+2	; 0x02
    3162:	fb 81       	ldd	r31, Y+3	; 0x03
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	82 30       	cpi	r24, 0x02	; 2
    3168:	61 f4       	brne	.+24     	; 0x3182 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    316a:	ea 81       	ldd	r30, Y+2	; 0x02
    316c:	fb 81       	ldd	r31, Y+3	; 0x03
    316e:	80 81       	ld	r24, Z
    3170:	ea 81       	ldd	r30, Y+2	; 0x02
    3172:	fb 81       	ldd	r31, Y+3	; 0x03
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	69 2f       	mov	r22, r25
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	16 c0       	rjmp	.+44     	; 0x31ae <LED_enuTurnOFF+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
    3182:	ea 81       	ldd	r30, Y+2	; 0x02
    3184:	fb 81       	ldd	r31, Y+3	; 0x03
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	83 30       	cpi	r24, 0x03	; 3
    318a:	61 f4       	brne	.+24     	; 0x31a4 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    318c:	ea 81       	ldd	r30, Y+2	; 0x02
    318e:	fb 81       	ldd	r31, Y+3	; 0x03
    3190:	80 81       	ld	r24, Z
    3192:	ea 81       	ldd	r30, Y+2	; 0x02
    3194:	fb 81       	ldd	r31, Y+3	; 0x03
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	69 2f       	mov	r22, r25
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	05 c0       	rjmp	.+10     	; 0x31ae <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    31a4:	83 e0       	ldi	r24, 0x03	; 3
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    31aa:	82 e0       	ldi	r24, 0x02	; 2
    31ac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"
ES_t LCD_enuInit(void)
{
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	e9 97       	sbiw	r28, 0x39	; 57
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    31d0:	19 ae       	std	Y+57, r1	; 0x39
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 ef       	ldi	r26, 0xF0	; 240
    31d8:	b1 e4       	ldi	r27, 0x41	; 65
    31da:	8d ab       	std	Y+53, r24	; 0x35
    31dc:	9e ab       	std	Y+54, r25	; 0x36
    31de:	af ab       	std	Y+55, r26	; 0x37
    31e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	6d a9       	ldd	r22, Y+53	; 0x35
    31e4:	7e a9       	ldd	r23, Y+54	; 0x36
    31e6:	8f a9       	ldd	r24, Y+55	; 0x37
    31e8:	98 ad       	ldd	r25, Y+56	; 0x38
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a e7       	ldi	r20, 0x7A	; 122
    31f0:	53 e4       	ldi	r21, 0x43	; 67
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	89 ab       	std	Y+49, r24	; 0x31
    31fc:	9a ab       	std	Y+50, r25	; 0x32
    31fe:	ab ab       	std	Y+51, r26	; 0x33
    3200:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3202:	69 a9       	ldd	r22, Y+49	; 0x31
    3204:	7a a9       	ldd	r23, Y+50	; 0x32
    3206:	8b a9       	ldd	r24, Y+51	; 0x33
    3208:	9c a9       	ldd	r25, Y+52	; 0x34
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	2c f4       	brge	.+10     	; 0x3224 <LCD_enuInit+0x68>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	98 ab       	std	Y+48, r25	; 0x30
    3220:	8f a7       	std	Y+47, r24	; 0x2f
    3222:	3f c0       	rjmp	.+126    	; 0x32a2 <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    3224:	69 a9       	ldd	r22, Y+49	; 0x31
    3226:	7a a9       	ldd	r23, Y+50	; 0x32
    3228:	8b a9       	ldd	r24, Y+51	; 0x33
    322a:	9c a9       	ldd	r25, Y+52	; 0x34
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	4c f5       	brge	.+82     	; 0x328e <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	6d a9       	ldd	r22, Y+53	; 0x35
    323e:	7e a9       	ldd	r23, Y+54	; 0x36
    3240:	8f a9       	ldd	r24, Y+55	; 0x37
    3242:	98 ad       	ldd	r25, Y+56	; 0x38
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	98 ab       	std	Y+48, r25	; 0x30
    3262:	8f a7       	std	Y+47, r24	; 0x2f
    3264:	0f c0       	rjmp	.+30     	; 0x3284 <LCD_enuInit+0xc8>
    3266:	89 e1       	ldi	r24, 0x19	; 25
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9e a7       	std	Y+46, r25	; 0x2e
    326c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    326e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3270:	9e a5       	ldd	r25, Y+46	; 0x2e
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <LCD_enuInit+0xb6>
    3276:	9e a7       	std	Y+46, r25	; 0x2e
    3278:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327a:	8f a5       	ldd	r24, Y+47	; 0x2f
    327c:	98 a9       	ldd	r25, Y+48	; 0x30
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	98 ab       	std	Y+48, r25	; 0x30
    3282:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3284:	8f a5       	ldd	r24, Y+47	; 0x2f
    3286:	98 a9       	ldd	r25, Y+48	; 0x30
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	69 f7       	brne	.-38     	; 0x3266 <LCD_enuInit+0xaa>
    328c:	14 c0       	rjmp	.+40     	; 0x32b6 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328e:	69 a9       	ldd	r22, Y+49	; 0x31
    3290:	7a a9       	ldd	r23, Y+50	; 0x32
    3292:	8b a9       	ldd	r24, Y+51	; 0x33
    3294:	9c a9       	ldd	r25, Y+52	; 0x34
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	98 ab       	std	Y+48, r25	; 0x30
    32a0:	8f a7       	std	Y+47, r24	; 0x2f
    32a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a4:	98 a9       	ldd	r25, Y+48	; 0x30
    32a6:	9c a7       	std	Y+44, r25	; 0x2c
    32a8:	8b a7       	std	Y+43, r24	; 0x2b
    32aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    32ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <LCD_enuInit+0xf2>
    32b2:	9c a7       	std	Y+44, r25	; 0x2c
    32b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
/*set direction for control pins "Output"*/
DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	41 e0       	ldi	r20, 0x01	; 1
    32bc:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	61 e0       	ldi	r22, 0x01	; 1
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	62 e0       	ldi	r22, 0x02	; 2
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
/*set direction for Data pins "Output"*/
DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	60 e0       	ldi	r22, 0x00	; 0
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	62 e0       	ldi	r22, 0x02	; 2
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	63 e0       	ldi	r22, 0x03	; 3
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>

#if LCD_MODE == EIGHT_BIT
DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    32fc:	82 e0       	ldi	r24, 0x02	; 2
    32fe:	64 e0       	ldi	r22, 0x04	; 4
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	65 e0       	ldi	r22, 0x05	; 5
    330a:	41 e0       	ldi	r20, 0x01	; 1
    330c:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	66 e0       	ldi	r22, 0x06	; 6
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	67 e0       	ldi	r22, 0x07	; 7
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>

/*Function Set for 8 mode*/
LCD_invidSendCommand(FUN_SET_EIGHT);
    3324:	88 e3       	ldi	r24, 0x38	; 56
    3326:	0e 94 1e 1c 	call	0x383c	; 0x383c <LCD_invidSendCommand>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 e8       	ldi	r26, 0x80	; 128
    3330:	bf e3       	ldi	r27, 0x3F	; 63
    3332:	8f a3       	std	Y+39, r24	; 0x27
    3334:	98 a7       	std	Y+40, r25	; 0x28
    3336:	a9 a7       	std	Y+41, r26	; 0x29
    3338:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333a:	6f a1       	ldd	r22, Y+39	; 0x27
    333c:	78 a5       	ldd	r23, Y+40	; 0x28
    333e:	89 a5       	ldd	r24, Y+41	; 0x29
    3340:	9a a5       	ldd	r25, Y+42	; 0x2a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a e7       	ldi	r20, 0x7A	; 122
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	8b a3       	std	Y+35, r24	; 0x23
    3354:	9c a3       	std	Y+36, r25	; 0x24
    3356:	ad a3       	std	Y+37, r26	; 0x25
    3358:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    335a:	6b a1       	ldd	r22, Y+35	; 0x23
    335c:	7c a1       	ldd	r23, Y+36	; 0x24
    335e:	8d a1       	ldd	r24, Y+37	; 0x25
    3360:	9e a1       	ldd	r25, Y+38	; 0x26
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	2c f4       	brge	.+10     	; 0x337c <LCD_enuInit+0x1c0>
		__ticks = 1;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	9a a3       	std	Y+34, r25	; 0x22
    3378:	89 a3       	std	Y+33, r24	; 0x21
    337a:	3f c0       	rjmp	.+126    	; 0x33fa <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    337c:	6b a1       	ldd	r22, Y+35	; 0x23
    337e:	7c a1       	ldd	r23, Y+36	; 0x24
    3380:	8d a1       	ldd	r24, Y+37	; 0x25
    3382:	9e a1       	ldd	r25, Y+38	; 0x26
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	4f e7       	ldi	r20, 0x7F	; 127
    338a:	57 e4       	ldi	r21, 0x47	; 71
    338c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3390:	18 16       	cp	r1, r24
    3392:	4c f5       	brge	.+82     	; 0x33e6 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3394:	6f a1       	ldd	r22, Y+39	; 0x27
    3396:	78 a5       	ldd	r23, Y+40	; 0x28
    3398:	89 a5       	ldd	r24, Y+41	; 0x29
    339a:	9a a5       	ldd	r25, Y+42	; 0x2a
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e2       	ldi	r20, 0x20	; 32
    33a2:	51 e4       	ldi	r21, 0x41	; 65
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9a a3       	std	Y+34, r25	; 0x22
    33ba:	89 a3       	std	Y+33, r24	; 0x21
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <LCD_enuInit+0x220>
    33be:	89 e1       	ldi	r24, 0x19	; 25
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	98 a3       	std	Y+32, r25	; 0x20
    33c4:	8f 8f       	std	Y+31, r24	; 0x1f
    33c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c8:	98 a1       	ldd	r25, Y+32	; 0x20
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <LCD_enuInit+0x20e>
    33ce:	98 a3       	std	Y+32, r25	; 0x20
    33d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	89 a1       	ldd	r24, Y+33	; 0x21
    33d4:	9a a1       	ldd	r25, Y+34	; 0x22
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9a a3       	std	Y+34, r25	; 0x22
    33da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	89 a1       	ldd	r24, Y+33	; 0x21
    33de:	9a a1       	ldd	r25, Y+34	; 0x22
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	69 f7       	brne	.-38     	; 0x33be <LCD_enuInit+0x202>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e6:	6b a1       	ldd	r22, Y+35	; 0x23
    33e8:	7c a1       	ldd	r23, Y+36	; 0x24
    33ea:	8d a1       	ldd	r24, Y+37	; 0x25
    33ec:	9e a1       	ldd	r25, Y+38	; 0x26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9a a3       	std	Y+34, r25	; 0x22
    33f8:	89 a3       	std	Y+33, r24	; 0x21
    33fa:	89 a1       	ldd	r24, Y+33	; 0x21
    33fc:	9a a1       	ldd	r25, Y+34	; 0x22
    33fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3400:	8d 8f       	std	Y+29, r24	; 0x1d
    3402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3404:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCD_enuInit+0x24a>
    340a:	9e 8f       	std	Y+30, r25	; 0x1e
    340c:	8d 8f       	std	Y+29, r24	; 0x1d
LCD_invidSendCommend(FUN_SET_FOUR);
#else
#error "LCD_MODE has a wrong selection"
#endif
   _delay_ms(1);
	LCD_invidSendCommand(DISPLAY_ON); //display on and cursor and blink
    340e:	8f e0       	ldi	r24, 0x0F	; 15
    3410:	0e 94 1e 1c 	call	0x383c	; 0x383c <LCD_invidSendCommand>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 e8       	ldi	r26, 0x80	; 128
    341a:	bf e3       	ldi	r27, 0x3F	; 63
    341c:	89 8f       	std	Y+25, r24	; 0x19
    341e:	9a 8f       	std	Y+26, r25	; 0x1a
    3420:	ab 8f       	std	Y+27, r26	; 0x1b
    3422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	69 8d       	ldd	r22, Y+25	; 0x19
    3426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a e7       	ldi	r20, 0x7A	; 122
    3432:	53 e4       	ldi	r21, 0x43	; 67
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8d 8b       	std	Y+21, r24	; 0x15
    343e:	9e 8b       	std	Y+22, r25	; 0x16
    3440:	af 8b       	std	Y+23, r26	; 0x17
    3442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3444:	6d 89       	ldd	r22, Y+21	; 0x15
    3446:	7e 89       	ldd	r23, Y+22	; 0x16
    3448:	8f 89       	ldd	r24, Y+23	; 0x17
    344a:	98 8d       	ldd	r25, Y+24	; 0x18
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	2c f4       	brge	.+10     	; 0x3466 <LCD_enuInit+0x2aa>
		__ticks = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c 8b       	std	Y+20, r25	; 0x14
    3462:	8b 8b       	std	Y+19, r24	; 0x13
    3464:	3f c0       	rjmp	.+126    	; 0x34e4 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    3466:	6d 89       	ldd	r22, Y+21	; 0x15
    3468:	7e 89       	ldd	r23, Y+22	; 0x16
    346a:	8f 89       	ldd	r24, Y+23	; 0x17
    346c:	98 8d       	ldd	r25, Y+24	; 0x18
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	4f e7       	ldi	r20, 0x7F	; 127
    3474:	57 e4       	ldi	r21, 0x47	; 71
    3476:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    347a:	18 16       	cp	r1, r24
    347c:	4c f5       	brge	.+82     	; 0x34d0 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347e:	69 8d       	ldd	r22, Y+25	; 0x19
    3480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9c 8b       	std	Y+20, r25	; 0x14
    34a4:	8b 8b       	std	Y+19, r24	; 0x13
    34a6:	0f c0       	rjmp	.+30     	; 0x34c6 <LCD_enuInit+0x30a>
    34a8:	89 e1       	ldi	r24, 0x19	; 25
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9a 8b       	std	Y+18, r25	; 0x12
    34ae:	89 8b       	std	Y+17, r24	; 0x11
    34b0:	89 89       	ldd	r24, Y+17	; 0x11
    34b2:	9a 89       	ldd	r25, Y+18	; 0x12
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <LCD_enuInit+0x2f8>
    34b8:	9a 8b       	std	Y+18, r25	; 0x12
    34ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	9c 8b       	std	Y+20, r25	; 0x14
    34c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	69 f7       	brne	.-38     	; 0x34a8 <LCD_enuInit+0x2ec>
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	6d 89       	ldd	r22, Y+21	; 0x15
    34d2:	7e 89       	ldd	r23, Y+22	; 0x16
    34d4:	8f 89       	ldd	r24, Y+23	; 0x17
    34d6:	98 8d       	ldd	r25, Y+24	; 0x18
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9c 8b       	std	Y+20, r25	; 0x14
    34e2:	8b 8b       	std	Y+19, r24	; 0x13
    34e4:	8b 89       	ldd	r24, Y+19	; 0x13
    34e6:	9c 89       	ldd	r25, Y+20	; 0x14
    34e8:	98 8b       	std	Y+16, r25	; 0x10
    34ea:	8f 87       	std	Y+15, r24	; 0x0f
    34ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ee:	98 89       	ldd	r25, Y+16	; 0x10
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <LCD_enuInit+0x334>
    34f4:	98 8b       	std	Y+16, r25	; 0x10
    34f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(DISPLAY_CLEAR);
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	0e 94 1e 1c 	call	0x383c	; 0x383c <LCD_invidSendCommand>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	a0 e0       	ldi	r26, 0x00	; 0
    3504:	b0 e4       	ldi	r27, 0x40	; 64
    3506:	8b 87       	std	Y+11, r24	; 0x0b
    3508:	9c 87       	std	Y+12, r25	; 0x0c
    350a:	ad 87       	std	Y+13, r26	; 0x0d
    350c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3510:	7c 85       	ldd	r23, Y+12	; 0x0c
    3512:	8d 85       	ldd	r24, Y+13	; 0x0d
    3514:	9e 85       	ldd	r25, Y+14	; 0x0e
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a e7       	ldi	r20, 0x7A	; 122
    351c:	53 e4       	ldi	r21, 0x43	; 67
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8f 83       	std	Y+7, r24	; 0x07
    3528:	98 87       	std	Y+8, r25	; 0x08
    352a:	a9 87       	std	Y+9, r26	; 0x09
    352c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <LCD_enuInit+0x394>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9e 83       	std	Y+6, r25	; 0x06
    354c:	8d 83       	std	Y+5, r24	; 0x05
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    3550:	6f 81       	ldd	r22, Y+7	; 0x07
    3552:	78 85       	ldd	r23, Y+8	; 0x08
    3554:	89 85       	ldd	r24, Y+9	; 0x09
    3556:	9a 85       	ldd	r25, Y+10	; 0x0a
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	6b 85       	ldd	r22, Y+11	; 0x0b
    356a:	7c 85       	ldd	r23, Y+12	; 0x0c
    356c:	8d 85       	ldd	r24, Y+13	; 0x0d
    356e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <LCD_enuInit+0x3f4>
    3592:	89 e1       	ldi	r24, 0x19	; 25
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9c 83       	std	Y+4, r25	; 0x04
    3598:	8b 83       	std	Y+3, r24	; 0x03
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	9c 81       	ldd	r25, Y+4	; 0x04
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <LCD_enuInit+0x3e2>
    35a2:	9c 83       	std	Y+4, r25	; 0x04
    35a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9e 83       	std	Y+6, r25	; 0x06
    35ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <LCD_enuInit+0x3d6>
    35b8:	14 c0       	rjmp	.+40     	; 0x35e2 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6f 81       	ldd	r22, Y+7	; 0x07
    35bc:	78 85       	ldd	r23, Y+8	; 0x08
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9e 83       	std	Y+6, r25	; 0x06
    35cc:	8d 83       	std	Y+5, r24	; 0x05
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	9a 81       	ldd	r25, Y+2	; 0x02
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <LCD_enuInit+0x41e>
    35de:	9a 83       	std	Y+2, r25	; 0x02
    35e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(ENTRY_MODE); //Write left to right increase
    35e2:	86 e0       	ldi	r24, 0x06	; 6
    35e4:	0e 94 1e 1c 	call	0x383c	; 0x383c <LCD_invidSendCommand>
	return Local_enuErrorState;
    35e8:	89 ad       	ldd	r24, Y+57	; 0x39


}
    35ea:	e9 96       	adiw	r28, 0x39	; 57
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <LCD_enuDisplayChar>:
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	00 d0       	rcall	.+0      	; 0x3602 <LCD_enuDisplayChar+0x6>
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3608:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=1 to DATA*/
	DIO_enuSetPinVal(RS_PORT , RS_PIN , DIO_u8HIGH);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>

	LCD_vidLatch(Copy_u8Data);
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	0e 94 29 1b 	call	0x3652	; 0x3652 <LCD_vidLatch>

	return Local_enuErrorState;
    361a:	89 81       	ldd	r24, Y+1	; 0x01


}
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <LCD_enuSendCommand>:
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <LCD_enuSendCommand+0x6>
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3632:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=0 to command*/
	Local_enuErrorState=DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    363e:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vidLatch(Copy_u8Command);
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	0e 94 29 1b 	call	0x3652	; 0x3652 <LCD_vidLatch>



	return Local_enuErrorState;
    3646:	89 81       	ldd	r24, Y+1	; 0x01


}
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <LCD_vidLatch>:
static void LCD_vidLatch(u8 Copy_u8Data){
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	2f 97       	sbiw	r28, 0x0f	; 15
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	8f 87       	std	Y+15, r24	; 0x0f


	    /* set pin value for RW=0 to write ,Enable pin (EN)=LOW */
		DIO_enuSetPinVal(RW_PORT,RW_PIN,DIO_u8LOW);
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	62 e0       	ldi	r22, 0x02	; 2
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>

	    /* set pin value for DATA pins */
	    DIO_enuSetPinVal(D7_PORT,D7_PIN,(Copy_u8Data>>BIT_SEVEN)&MASK_NUM);
    367c:	8f 85       	ldd	r24, Y+15	; 0x0f
    367e:	98 2f       	mov	r25, r24
    3680:	99 1f       	adc	r25, r25
    3682:	99 27       	eor	r25, r25
    3684:	99 1f       	adc	r25, r25
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	49 2f       	mov	r20, r25
    368c:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D6_PORT,D6_PIN,(Copy_u8Data>>BIT_SIX  )&MASK_NUM);
    3690:	8f 85       	ldd	r24, Y+15	; 0x0f
    3692:	82 95       	swap	r24
    3694:	86 95       	lsr	r24
    3696:	86 95       	lsr	r24
    3698:	83 70       	andi	r24, 0x03	; 3
    369a:	98 2f       	mov	r25, r24
    369c:	91 70       	andi	r25, 0x01	; 1
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	61 e0       	ldi	r22, 0x01	; 1
    36a2:	49 2f       	mov	r20, r25
    36a4:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D5_PORT,D5_PIN,(Copy_u8Data>>BIT_FIVE )&MASK_NUM);
    36a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36aa:	82 95       	swap	r24
    36ac:	86 95       	lsr	r24
    36ae:	87 70       	andi	r24, 0x07	; 7
    36b0:	98 2f       	mov	r25, r24
    36b2:	91 70       	andi	r25, 0x01	; 1
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	49 2f       	mov	r20, r25
    36ba:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_FOUR)&MASK_NUM);
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	82 95       	swap	r24
    36c2:	8f 70       	andi	r24, 0x0F	; 15
    36c4:	98 2f       	mov	r25, r24
    36c6:	91 70       	andi	r25, 0x01	; 1
    36c8:	82 e0       	ldi	r24, 0x02	; 2
    36ca:	63 e0       	ldi	r22, 0x03	; 3
    36cc:	49 2f       	mov	r20, r25
    36ce:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
#if LCD_MODE ==EIGHT_BIT
		DIO_enuSetPinVal(D3_PORT,D3_PIN,(Copy_u8Data>>BIT_THREE)&MASK_NUM);
    36d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d4:	86 95       	lsr	r24
    36d6:	86 95       	lsr	r24
    36d8:	86 95       	lsr	r24
    36da:	98 2f       	mov	r25, r24
    36dc:	91 70       	andi	r25, 0x01	; 1
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	64 e0       	ldi	r22, 0x04	; 4
    36e2:	49 2f       	mov	r20, r25
    36e4:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D2_PORT,D2_PIN,(Copy_u8Data>>BIT_TWO  )&MASK_NUM);
    36e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ea:	86 95       	lsr	r24
    36ec:	86 95       	lsr	r24
    36ee:	98 2f       	mov	r25, r24
    36f0:	91 70       	andi	r25, 0x01	; 1
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	65 e0       	ldi	r22, 0x05	; 5
    36f6:	49 2f       	mov	r20, r25
    36f8:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D1_PORT,D1_PIN,(Copy_u8Data>>BIT_ONE  )&MASK_NUM);
    36fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fe:	86 95       	lsr	r24
    3700:	98 2f       	mov	r25, r24
    3702:	91 70       	andi	r25, 0x01	; 1
    3704:	82 e0       	ldi	r24, 0x02	; 2
    3706:	66 e0       	ldi	r22, 0x06	; 6
    3708:	49 2f       	mov	r20, r25
    370a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D0_PORT,D0_PIN,(Copy_u8Data>>BIT_ZERO )&MASK_NUM);
    370e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3710:	98 2f       	mov	r25, r24
    3712:	91 70       	andi	r25, 0x01	; 1
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	67 e0       	ldi	r22, 0x07	; 7
    3718:	49 2f       	mov	r20, r25
    371a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
		 DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_ZERO &MASK_NUM);
#else
#error "LCD_MODE has a wrong selection"
#endif
		/*Enable*/
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8HIGH);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	62 e0       	ldi	r22, 0x02	; 2
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	a0 e2       	ldi	r26, 0x20	; 32
    372e:	b1 e4       	ldi	r27, 0x41	; 65
    3730:	8b 87       	std	Y+11, r24	; 0x0b
    3732:	9c 87       	std	Y+12, r25	; 0x0c
    3734:	ad 87       	std	Y+13, r26	; 0x0d
    3736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3738:	6b 85       	ldd	r22, Y+11	; 0x0b
    373a:	7c 85       	ldd	r23, Y+12	; 0x0c
    373c:	8d 85       	ldd	r24, Y+13	; 0x0d
    373e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	4a e7       	ldi	r20, 0x7A	; 122
    3746:	53 e4       	ldi	r21, 0x43	; 67
    3748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8f 83       	std	Y+7, r24	; 0x07
    3752:	98 87       	std	Y+8, r25	; 0x08
    3754:	a9 87       	std	Y+9, r26	; 0x09
    3756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3758:	6f 81       	ldd	r22, Y+7	; 0x07
    375a:	78 85       	ldd	r23, Y+8	; 0x08
    375c:	89 85       	ldd	r24, Y+9	; 0x09
    375e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e8       	ldi	r20, 0x80	; 128
    3766:	5f e3       	ldi	r21, 0x3F	; 63
    3768:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    376c:	88 23       	and	r24, r24
    376e:	2c f4       	brge	.+10     	; 0x377a <LCD_vidLatch+0x128>
		__ticks = 1;
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
    3778:	3f c0       	rjmp	.+126    	; 0x37f8 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    377a:	6f 81       	ldd	r22, Y+7	; 0x07
    377c:	78 85       	ldd	r23, Y+8	; 0x08
    377e:	89 85       	ldd	r24, Y+9	; 0x09
    3780:	9a 85       	ldd	r25, Y+10	; 0x0a
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	3f ef       	ldi	r19, 0xFF	; 255
    3786:	4f e7       	ldi	r20, 0x7F	; 127
    3788:	57 e4       	ldi	r21, 0x47	; 71
    378a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    378e:	18 16       	cp	r1, r24
    3790:	4c f5       	brge	.+82     	; 0x37e4 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3792:	6b 85       	ldd	r22, Y+11	; 0x0b
    3794:	7c 85       	ldd	r23, Y+12	; 0x0c
    3796:	8d 85       	ldd	r24, Y+13	; 0x0d
    3798:	9e 85       	ldd	r25, Y+14	; 0x0e
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e2       	ldi	r20, 0x20	; 32
    37a0:	51 e4       	ldi	r21, 0x41	; 65
    37a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	bc 01       	movw	r22, r24
    37ac:	cd 01       	movw	r24, r26
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
    37ba:	0f c0       	rjmp	.+30     	; 0x37da <LCD_vidLatch+0x188>
    37bc:	89 e1       	ldi	r24, 0x19	; 25
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	9c 81       	ldd	r25, Y+4	; 0x04
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <LCD_vidLatch+0x176>
    37cc:	9c 83       	std	Y+4, r25	; 0x04
    37ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d0:	8d 81       	ldd	r24, Y+5	; 0x05
    37d2:	9e 81       	ldd	r25, Y+6	; 0x06
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37da:	8d 81       	ldd	r24, Y+5	; 0x05
    37dc:	9e 81       	ldd	r25, Y+6	; 0x06
    37de:	00 97       	sbiw	r24, 0x00	; 0
    37e0:	69 f7       	brne	.-38     	; 0x37bc <LCD_vidLatch+0x16a>
    37e2:	14 c0       	rjmp	.+40     	; 0x380c <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e4:	6f 81       	ldd	r22, Y+7	; 0x07
    37e6:	78 85       	ldd	r23, Y+8	; 0x08
    37e8:	89 85       	ldd	r24, Y+9	; 0x09
    37ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	9e 83       	std	Y+6, r25	; 0x06
    37f6:	8d 83       	std	Y+5, r24	; 0x05
    37f8:	8d 81       	ldd	r24, Y+5	; 0x05
    37fa:	9e 81       	ldd	r25, Y+6	; 0x06
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	9a 81       	ldd	r25, Y+2	; 0x02
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_vidLatch+0x1b2>
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10);
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	62 e0       	ldi	r22, 0x02	; 2
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>

		// _delay_ms(10);
}
    3816:	2f 96       	adiw	r28, 0x0f	; 15
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <LCD_vidClearScreen>:


void LCD_vidClearScreen(void)
{
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
	LCD_invidSendCommand(DISPLAY_CLEAR);
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	0e 94 1e 1c 	call	0x383c	; 0x383c <LCD_invidSendCommand>
	//LCD_u8PosCounter = 0;
}
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	0f 92       	push	r0
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	89 83       	std	Y+1, r24	; 0x01

		/*set pin value for RS=0 to command*/
		DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	40 e0       	ldi	r20, 0x00	; 0
    384e:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>

		LCD_vidLatch(  Copy_u8Command);
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	0e 94 29 1b 	call	0x3652	; 0x3652 <LCD_vidLatch>
}
    3858:	0f 90       	pop	r0
    385a:	cf 91       	pop	r28
    385c:	df 91       	pop	r29
    385e:	08 95       	ret

00003860 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col){
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	28 97       	sbiw	r28, 0x08	; 8
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	8f 83       	std	Y+7, r24	; 0x07
    3876:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    3878:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8Address;
    if(Copy_u8Row<4&&Copy_u8Col<16){
    387a:	8f 81       	ldd	r24, Y+7	; 0x07
    387c:	84 30       	cpi	r24, 0x04	; 4
    387e:	c0 f4       	brcc	.+48     	; 0x38b0 <LCD_enuGoToPosition+0x50>
    3880:	88 85       	ldd	r24, Y+8	; 0x08
    3882:	80 31       	cpi	r24, 0x10	; 16
    3884:	a8 f4       	brcc	.+42     	; 0x38b0 <LCD_enuGoToPosition+0x50>
    	u8 arr[4]={0x80,0xC0,0x90,0xD0};
    3886:	80 e8       	ldi	r24, 0x80	; 128
    3888:	8b 83       	std	Y+3, r24	; 0x03
    388a:	80 ec       	ldi	r24, 0xC0	; 192
    388c:	8c 83       	std	Y+4, r24	; 0x04
    388e:	80 e9       	ldi	r24, 0x90	; 144
    3890:	8d 83       	std	Y+5, r24	; 0x05
    3892:	80 ed       	ldi	r24, 0xD0	; 208
    3894:	8e 83       	std	Y+6, r24	; 0x06
    		LCD_enuSendCommand(arr[Copy_u8Row]+Copy_u8Col);
    3896:	8f 81       	ldd	r24, Y+7	; 0x07
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	ce 01       	movw	r24, r28
    389e:	03 96       	adiw	r24, 0x03	; 3
    38a0:	fc 01       	movw	r30, r24
    38a2:	e2 0f       	add	r30, r18
    38a4:	f3 1f       	adc	r31, r19
    38a6:	90 81       	ld	r25, Z
    38a8:	88 85       	ldd	r24, Y+8	; 0x08
    38aa:	89 0f       	add	r24, r25
    38ac:	0e 94 13 1b 	call	0x3626	; 0x3626 <LCD_enuSendCommand>

    }

	return Local_enuErrorState;
    38b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38b2:	28 96       	adiw	r28, 0x08	; 8
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <LCD_enuWriteString>:



ES_t LCD_enuWriteString(u8 *Copy_pu8Str,u8 Copy_u8Row, u8 Copy_u8Col){
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	28 97       	sbiw	r28, 0x08	; 8
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	9d 83       	std	Y+5, r25	; 0x05
    38da:	8c 83       	std	Y+4, r24	; 0x04
    38dc:	6e 83       	std	Y+6, r22	; 0x06
    38de:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    38e0:	1b 82       	std	Y+3, r1	; 0x03
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
    38e2:	8e 81       	ldd	r24, Y+6	; 0x06
    38e4:	6f 81       	ldd	r22, Y+7	; 0x07
    38e6:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_enuGoToPosition>
	u8 Local_u8Index=0;
    38ea:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Line=Copy_u8Row;
    38ec:	8e 81       	ldd	r24, Y+6	; 0x06
    38ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Str!=NULL){
    38f0:	8c 81       	ldd	r24, Y+4	; 0x04
    38f2:	9d 81       	ldd	r25, Y+5	; 0x05
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	09 f4       	brne	.+2      	; 0x38fa <LCD_enuWriteString+0x36>
    38f8:	8d c0       	rjmp	.+282    	; 0x3a14 <LCD_enuWriteString+0x150>
    38fa:	66 c0       	rjmp	.+204    	; 0x39c8 <LCD_enuWriteString+0x104>
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
			if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<16){
    38fc:	8e 81       	ldd	r24, Y+6	; 0x06
    38fe:	88 2f       	mov	r24, r24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	ac 01       	movw	r20, r24
    3904:	42 95       	swap	r20
    3906:	52 95       	swap	r21
    3908:	50 7f       	andi	r21, 0xF0	; 240
    390a:	54 27       	eor	r21, r20
    390c:	40 7f       	andi	r20, 0xF0	; 240
    390e:	54 27       	eor	r21, r20
    3910:	8f 81       	ldd	r24, Y+7	; 0x07
    3912:	28 2f       	mov	r18, r24
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	82 0f       	add	r24, r18
    391e:	93 1f       	adc	r25, r19
    3920:	84 0f       	add	r24, r20
    3922:	95 1f       	adc	r25, r21
    3924:	80 31       	cpi	r24, 0x10	; 16
    3926:	91 05       	cpc	r25, r1
    3928:	84 f4       	brge	.+32     	; 0x394a <LCD_enuWriteString+0x86>

				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	8c 81       	ldd	r24, Y+4	; 0x04
    3932:	9d 81       	ldd	r25, Y+5	; 0x05
    3934:	fc 01       	movw	r30, r24
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	80 81       	ld	r24, Z
    393c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_enuDisplayChar>
    3940:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	8f 5f       	subi	r24, 0xFF	; 255
    3946:	8a 83       	std	Y+2, r24	; 0x02
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_enuWriteString+0x104>
			}
			else if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))==16 && Local_u8Line==0){
    394a:	8e 81       	ldd	r24, Y+6	; 0x06
    394c:	88 2f       	mov	r24, r24
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	ac 01       	movw	r20, r24
    3952:	42 95       	swap	r20
    3954:	52 95       	swap	r21
    3956:	50 7f       	andi	r21, 0xF0	; 240
    3958:	54 27       	eor	r21, r20
    395a:	40 7f       	andi	r20, 0xF0	; 240
    395c:	54 27       	eor	r21, r20
    395e:	8f 81       	ldd	r24, Y+7	; 0x07
    3960:	28 2f       	mov	r18, r24
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	82 0f       	add	r24, r18
    396c:	93 1f       	adc	r25, r19
    396e:	84 0f       	add	r24, r20
    3970:	95 1f       	adc	r25, r21
    3972:	80 31       	cpi	r24, 0x10	; 16
    3974:	91 05       	cpc	r25, r1
    3976:	59 f4       	brne	.+22     	; 0x398e <LCD_enuWriteString+0xca>
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	88 23       	and	r24, r24
    397c:	41 f4       	brne	.+16     	; 0x398e <LCD_enuWriteString+0xca>
				LCD_enuGoToPosition(1,0);
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_enuGoToPosition>
				Local_u8Line++;
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	1d c0       	rjmp	.+58     	; 0x39c8 <LCD_enuWriteString+0x104>

			}
			else if((Copy_u8Col+Local_u8Index)<32 && Local_u8Line==1){
    398e:	8f 81       	ldd	r24, Y+7	; 0x07
    3990:	28 2f       	mov	r18, r24
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	8a 81       	ldd	r24, Y+2	; 0x02
    3996:	88 2f       	mov	r24, r24
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	82 0f       	add	r24, r18
    399c:	93 1f       	adc	r25, r19
    399e:	80 32       	cpi	r24, 0x20	; 32
    39a0:	91 05       	cpc	r25, r1
    39a2:	94 f4       	brge	.+36     	; 0x39c8 <LCD_enuWriteString+0x104>
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	79 f4       	brne	.+30     	; 0x39c8 <LCD_enuWriteString+0x104>
				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	9d 81       	ldd	r25, Y+5	; 0x05
    39b4:	fc 01       	movw	r30, r24
    39b6:	e2 0f       	add	r30, r18
    39b8:	f3 1f       	adc	r31, r19
    39ba:	80 81       	ld	r24, Z
    39bc:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_enuDisplayChar>
    39c0:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	8f 5f       	subi	r24, 0xFF	; 255
    39c6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
	u8 Local_u8Index=0;
	u8 Local_u8Line=Copy_u8Row;
	if(Copy_pu8Str!=NULL){
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
    39c8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ca:	28 2f       	mov	r18, r24
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	8c 81       	ldd	r24, Y+4	; 0x04
    39d0:	9d 81       	ldd	r25, Y+5	; 0x05
    39d2:	fc 01       	movw	r30, r24
    39d4:	e2 0f       	add	r30, r18
    39d6:	f3 1f       	adc	r31, r19
    39d8:	80 81       	ld	r24, Z
    39da:	88 23       	and	r24, r24
    39dc:	c1 f0       	breq	.+48     	; 0x3a0e <LCD_enuWriteString+0x14a>
    39de:	8e 81       	ldd	r24, Y+6	; 0x06
    39e0:	88 2f       	mov	r24, r24
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	ac 01       	movw	r20, r24
    39e6:	42 95       	swap	r20
    39e8:	52 95       	swap	r21
    39ea:	50 7f       	andi	r21, 0xF0	; 240
    39ec:	54 27       	eor	r21, r20
    39ee:	40 7f       	andi	r20, 0xF0	; 240
    39f0:	54 27       	eor	r21, r20
    39f2:	8f 81       	ldd	r24, Y+7	; 0x07
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	82 0f       	add	r24, r18
    3a00:	93 1f       	adc	r25, r19
    3a02:	84 0f       	add	r24, r20
    3a04:	95 1f       	adc	r25, r21
    3a06:	80 32       	cpi	r24, 0x20	; 32
    3a08:	91 05       	cpc	r25, r1
    3a0a:	0c f4       	brge	.+2      	; 0x3a0e <LCD_enuWriteString+0x14a>
    3a0c:	77 cf       	rjmp	.-274    	; 0x38fc <LCD_enuWriteString+0x38>
	}
	else
		{
			return ES_NULL_POINTER;
		}
		return Local_enuErrorState;
    3a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a10:	88 87       	std	Y+8, r24	; 0x08
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <LCD_enuWriteString+0x154>
			}
		}
	}
	else
		{
			return ES_NULL_POINTER;
    3a14:	82 e0       	ldi	r24, 0x02	; 2
    3a16:	88 87       	std	Y+8, r24	; 0x08
    3a18:	88 85       	ldd	r24, Y+8	; 0x08
		}
		return Local_enuErrorState;

}
    3a1a:	28 96       	adiw	r28, 0x08	; 8
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <LCD_enuDisplayNum>:
ES_t LCD_enuDisplayNum(s32 Copy_s32Num)
{
    3a2c:	0f 93       	push	r16
    3a2e:	1f 93       	push	r17
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
    3a38:	cc 54       	subi	r28, 0x4C	; 76
    3a3a:	d0 40       	sbci	r29, 0x00	; 0
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	fe 01       	movw	r30, r28
    3a48:	e7 5b       	subi	r30, 0xB7	; 183
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 83       	st	Z, r22
    3a4e:	71 83       	std	Z+1, r23	; 0x01
    3a50:	82 83       	std	Z+2, r24	; 0x02
    3a52:	93 83       	std	Z+3, r25	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3a54:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_As8Container[16];
	s32 Local_s32Reverse=0;
    3a56:	1c 82       	std	Y+4, r1	; 0x04
    3a58:	1d 82       	std	Y+5, r1	; 0x05
    3a5a:	1e 82       	std	Y+6, r1	; 0x06
    3a5c:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    3a5e:	1b 82       	std	Y+3, r1	; 0x03
    3a60:	1a 82       	std	Y+2, r1	; 0x02
   u8 x=0;
    3a62:	19 82       	std	Y+1, r1	; 0x01
   if(Copy_s32Num ==0)
    3a64:	fe 01       	movw	r30, r28
    3a66:	e7 5b       	subi	r30, 0xB7	; 183
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a70:	b3 81       	ldd	r27, Z+3	; 0x03
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	a1 05       	cpc	r26, r1
    3a76:	b1 05       	cpc	r27, r1
    3a78:	19 f4       	brne	.+6      	; 0x3a80 <LCD_enuDisplayNum+0x54>
   	{
   		LCD_enuDisplayChar('0');
    3a7a:	80 e3       	ldi	r24, 0x30	; 48
    3a7c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_enuDisplayChar>

   	}
	if(Copy_s32Num <0)
    3a80:	fe 01       	movw	r30, r28
    3a82:	e7 5b       	subi	r30, 0xB7	; 183
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	a2 81       	ldd	r26, Z+2	; 0x02
    3a8c:	b3 81       	ldd	r27, Z+3	; 0x03
    3a8e:	bb 23       	and	r27, r27
    3a90:	0c f0       	brlt	.+2      	; 0x3a94 <LCD_enuDisplayNum+0x68>
    3a92:	63 c0       	rjmp	.+198    	; 0x3b5a <LCD_enuDisplayNum+0x12e>
	{
		LCD_enuDisplayChar('-');
    3a94:	8d e2       	ldi	r24, 0x2D	; 45
    3a96:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_enuDisplayChar>
		Copy_s32Num *= -1 ;
    3a9a:	9e 01       	movw	r18, r28
    3a9c:	27 5b       	subi	r18, 0xB7	; 183
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e7 5b       	subi	r30, 0xB7	; 183
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	a2 81       	ldd	r26, Z+2	; 0x02
    3aac:	b3 81       	ldd	r27, Z+3	; 0x03
    3aae:	b0 95       	com	r27
    3ab0:	a0 95       	com	r26
    3ab2:	90 95       	com	r25
    3ab4:	81 95       	neg	r24
    3ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab8:	af 4f       	sbci	r26, 0xFF	; 255
    3aba:	bf 4f       	sbci	r27, 0xFF	; 255
    3abc:	f9 01       	movw	r30, r18
    3abe:	80 83       	st	Z, r24
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	a2 83       	std	Z+2, r26	; 0x02
    3ac4:	b3 83       	std	Z+3, r27	; 0x03
    3ac6:	49 c0       	rjmp	.+146    	; 0x3b5a <LCD_enuDisplayNum+0x12e>
	}

	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e7 5b       	subi	r30, 0xB7	; 183
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ad4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ad6:	2a e0       	ldi	r18, 0x0A	; 10
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	bc 01       	movw	r22, r24
    3ae0:	cd 01       	movw	r24, r26
    3ae2:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__divmodsi4>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	8b 83       	std	Y+3, r24	; 0x03
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    3aec:	8c 81       	ldd	r24, Y+4	; 0x04
    3aee:	9d 81       	ldd	r25, Y+5	; 0x05
    3af0:	ae 81       	ldd	r26, Y+6	; 0x06
    3af2:	bf 81       	ldd	r27, Y+7	; 0x07
    3af4:	2a e0       	ldi	r18, 0x0A	; 10
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	50 e0       	ldi	r21, 0x00	; 0
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__mulsi3>
    3b04:	9b 01       	movw	r18, r22
    3b06:	ac 01       	movw	r20, r24
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	a0 e0       	ldi	r26, 0x00	; 0
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	82 0f       	add	r24, r18
    3b14:	93 1f       	adc	r25, r19
    3b16:	a4 1f       	adc	r26, r20
    3b18:	b5 1f       	adc	r27, r21
    3b1a:	8c 83       	std	Y+4, r24	; 0x04
    3b1c:	9d 83       	std	Y+5, r25	; 0x05
    3b1e:	ae 83       	std	Y+6, r26	; 0x06
    3b20:	bf 83       	std	Y+7, r27	; 0x07
		Copy_s32Num /=10;
    3b22:	8e 01       	movw	r16, r28
    3b24:	07 5b       	subi	r16, 0xB7	; 183
    3b26:	1f 4f       	sbci	r17, 0xFF	; 255
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e7 5b       	subi	r30, 0xB7	; 183
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	a2 81       	ldd	r26, Z+2	; 0x02
    3b34:	b3 81       	ldd	r27, Z+3	; 0x03
    3b36:	2a e0       	ldi	r18, 0x0A	; 10
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__divmodsi4>
    3b46:	da 01       	movw	r26, r20
    3b48:	c9 01       	movw	r24, r18
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8NumDigit ++;
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enuDisplayChar('-');
		Copy_s32Num *= -1 ;
	}

	while (Copy_s32Num)
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e7 5b       	subi	r30, 0xB7	; 183
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	a2 81       	ldd	r26, Z+2	; 0x02
    3b66:	b3 81       	ldd	r27, Z+3	; 0x03
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	a1 05       	cpc	r26, r1
    3b6c:	b1 05       	cpc	r27, r1
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <LCD_enuDisplayNum+0x146>
    3b70:	ab cf       	rjmp	.-170    	; 0x3ac8 <LCD_enuDisplayNum+0x9c>
    3b72:	2a c0       	rjmp	.+84     	; 0x3bc8 <LCD_enuDisplayNum+0x19c>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    3b74:	8c 81       	ldd	r24, Y+4	; 0x04
    3b76:	9d 81       	ldd	r25, Y+5	; 0x05
    3b78:	ae 81       	ldd	r26, Y+6	; 0x06
    3b7a:	bf 81       	ldd	r27, Y+7	; 0x07
    3b7c:	2a e0       	ldi	r18, 0x0A	; 10
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__divmodsi4>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	8b 83       	std	Y+3, r24	; 0x03

		x=Local_u8Remainder + '0';
    3b92:	8b 81       	ldd	r24, Y+3	; 0x03
    3b94:	80 5d       	subi	r24, 0xD0	; 208
    3b96:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuDisplayChar(x);
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_enuDisplayChar>
		Local_s32Reverse /= 10;
    3b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba2:	ae 81       	ldd	r26, Y+6	; 0x06
    3ba4:	bf 81       	ldd	r27, Y+7	; 0x07
    3ba6:	2a e0       	ldi	r18, 0x0A	; 10
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e0       	ldi	r20, 0x00	; 0
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__divmodsi4>
    3bb6:	da 01       	movw	r26, r20
    3bb8:	c9 01       	movw	r24, r18
    3bba:	8c 83       	std	Y+4, r24	; 0x04
    3bbc:	9d 83       	std	Y+5, r25	; 0x05
    3bbe:	ae 83       	std	Y+6, r26	; 0x06
    3bc0:	bf 83       	std	Y+7, r27	; 0x07
		Local_u8NumDigit --;
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	81 50       	subi	r24, 0x01	; 1
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	88 23       	and	r24, r24
    3bcc:	99 f6       	brne	.-90     	; 0x3b74 <LCD_enuDisplayNum+0x148>
		LCD_enuDisplayChar(x);
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    3bce:	88 85       	ldd	r24, Y+8	; 0x08
}
    3bd0:	c4 5b       	subi	r28, 0xB4	; 180
    3bd2:	df 4f       	sbci	r29, 0xFF	; 255
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	de bf       	out	0x3e, r29	; 62
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	cd bf       	out	0x3d, r28	; 61
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <Keypad_enuInit>:
#include "KeyPad_config.h"
#include "KeyPad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void){
    3be8:	df 93       	push	r29
    3bea:	cf 93       	push	r28
    3bec:	0f 92       	push	r0
    3bee:	cd b7       	in	r28, 0x3d	; 61
    3bf0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    3bf2:	19 82       	std	Y+1, r1	; 0x01
	    Local_enuErrorState=DIO_enuSetPinDirection(COL1_PORT,COL1_PIN, DIO_u8OUTPUT);
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	63 e0       	ldi	r22, 0x03	; 3
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3bfe:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(COL2_PORT,COL2_PIN, DIO_u8OUTPUT);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	64 e0       	ldi	r22, 0x04	; 4
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c0a:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(COL3_PORT,COL3_PIN, DIO_u8OUTPUT);
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	65 e0       	ldi	r22, 0x05	; 5
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c16:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(COL4_PORT,COL4_PIN, DIO_u8OUTPUT);
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	66 e0       	ldi	r22, 0x06	; 6
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c22:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState=DIO_enuSetPinDirection(ROW1_PORT,ROW1_PIN, DIO_u8INPUT);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	67 e0       	ldi	r22, 0x07	; 7
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c2e:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(ROW2_PORT,ROW2_PIN, DIO_u8INPUT);
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	66 e0       	ldi	r22, 0x06	; 6
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c3a:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(ROW3_PORT,ROW3_PIN, DIO_u8INPUT);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	65 e0       	ldi	r22, 0x05	; 5
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c46:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinDirection(ROW4_PORT,ROW4_PIN, DIO_u8INPUT);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	64 e0       	ldi	r22, 0x04	; 4
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3c52:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState=DIO_enuSetPinVal(COL1_PORT,COL1_PIN, DIO_u8HIGH);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	63 e0       	ldi	r22, 0x03	; 3
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c5e:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(COL2_PORT,COL2_PIN, DIO_u8HIGH);
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	64 e0       	ldi	r22, 0x04	; 4
    3c64:	41 e0       	ldi	r20, 0x01	; 1
    3c66:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c6a:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(COL3_PORT,COL3_PIN, DIO_u8HIGH);
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	65 e0       	ldi	r22, 0x05	; 5
    3c70:	41 e0       	ldi	r20, 0x01	; 1
    3c72:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c76:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(COL4_PORT,COL4_PIN, DIO_u8HIGH);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	66 e0       	ldi	r22, 0x06	; 6
    3c7c:	41 e0       	ldi	r20, 0x01	; 1
    3c7e:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c82:	89 83       	std	Y+1, r24	; 0x01

		Local_enuErrorState=DIO_enuSetPinVal(ROW1_PORT,ROW1_PIN, DIO_u8PULLUP);
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	67 e0       	ldi	r22, 0x07	; 7
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c8e:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(ROW2_PORT,ROW2_PIN, DIO_u8PULLUP);
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	66 e0       	ldi	r22, 0x06	; 6
    3c94:	41 e0       	ldi	r20, 0x01	; 1
    3c96:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3c9a:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(ROW3_PORT,ROW3_PIN, DIO_u8PULLUP);
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	65 e0       	ldi	r22, 0x05	; 5
    3ca0:	41 e0       	ldi	r20, 0x01	; 1
    3ca2:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3ca6:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState=DIO_enuSetPinVal(ROW4_PORT,ROW4_PIN, DIO_u8PULLUP);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	64 e0       	ldi	r22, 0x04	; 4
    3cac:	41 e0       	ldi	r20, 0x01	; 1
    3cae:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3cb2:	89 83       	std	Y+1, r24	; 0x01




	 return  Local_enuErrorState ;
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01

}
    3cb6:	0f 90       	pop	r0
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8Value_Key){
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <Keypad_enuGetPressedKey+0x6>
    3cc4:	00 d0       	rcall	.+0      	; 0x3cc6 <Keypad_enuGetPressedKey+0x8>
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <Keypad_enuGetPressedKey+0xa>
    3cc8:	cd b7       	in	r28, 0x3d	; 61
    3cca:	de b7       	in	r29, 0x3e	; 62
    3ccc:	9e 83       	std	Y+6, r25	; 0x06
    3cce:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState =ES_NOK;
    3cd0:	1b 82       	std	Y+3, r1	; 0x03
	if (Copy_pu8Value_Key != NULL)
    3cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <Keypad_enuGetPressedKey+0x1e>
    3cda:	88 c0       	rjmp	.+272    	; 0x3dec <Keypad_enuGetPressedKey+0x12e>
		{
		    *Copy_pu8Value_Key = KEY_NOT_PRESSED;
    3cdc:	ed 81       	ldd	r30, Y+5	; 0x05
    3cde:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce0:	8f ef       	ldi	r24, 0xFF	; 255
    3ce2:	80 83       	st	Z, r24
			static u8 Local_Au8RowPins[ROWS_NUM]     = { ROW1_PIN , ROW2_PIN , ROW3_PIN , ROW4_PIN };
			static u8 Local_Au8ColPorts[COLUMNS_NUM]  = { COL1_PORT, COL2_PORT, COL3_PORT, COL4_PORT };
			static u8 Local_Au8ColPins[COLUMNS_NUM]  = { COL1_PIN , COL2_PIN , COL3_PIN , COL4_PIN };
            static u8 Local_AuKeyPad[ROWS_NUM][COLUMNS_NUM]=KEYS_ARRVALUES;

    for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMNS_NUM;Local_u8ColIdx++)
    3ce4:	19 82       	std	Y+1, r1	; 0x01
    3ce6:	7d c0       	rjmp	.+250    	; 0x3de2 <Keypad_enuGetPressedKey+0x124>
    {
	   /*Activate current column*/
    	 Local_enuErrorState=DIO_enuSetPinVal(Local_Au8ColPorts[Local_u8ColIdx],Local_Au8ColPins [Local_u8ColIdx],DIO_u8LOW);
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	88 2f       	mov	r24, r24
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	fc 01       	movw	r30, r24
    3cf0:	ed 53       	subi	r30, 0x3D	; 61
    3cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf4:	20 81       	ld	r18, Z
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	88 2f       	mov	r24, r24
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	e4 57       	subi	r30, 0x74	; 116
    3d00:	fe 4f       	sbci	r31, 0xFE	; 254
    3d02:	90 81       	ld	r25, Z
    3d04:	82 2f       	mov	r24, r18
    3d06:	69 2f       	mov	r22, r25
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3d0e:	8b 83       	std	Y+3, r24	; 0x03

        for(Local_u8RowIdx=0;Local_u8RowIdx<ROWS_NUM;Local_u8RowIdx++)
    3d10:	1a 82       	std	Y+2, r1	; 0x02
    3d12:	4c c0       	rjmp	.+152    	; 0x3dac <Keypad_enuGetPressedKey+0xee>
        {
        /*Read the current Row*/
        	 Local_enuErrorState= DIO_enuGetPinVal(Local_Au8RowPorts[Local_u8RowIdx],Local_Au8RowPins [Local_u8RowIdx],&Local_u8GetState);
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	ec 56       	subi	r30, 0x6C	; 108
    3d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d20:	40 81       	ld	r20, Z
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	88 2f       	mov	r24, r24
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	fc 01       	movw	r30, r24
    3d2a:	e0 57       	subi	r30, 0x70	; 112
    3d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2e:	90 81       	ld	r25, Z
    3d30:	9e 01       	movw	r18, r28
    3d32:	2c 5f       	subi	r18, 0xFC	; 252
    3d34:	3f 4f       	sbci	r19, 0xFF	; 255
    3d36:	84 2f       	mov	r24, r20
    3d38:	69 2f       	mov	r22, r25
    3d3a:	a9 01       	movw	r20, r18
    3d3c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <DIO_enuGetPinVal>
    3d40:	8b 83       	std	Y+3, r24	; 0x03

        /*check if switch is pressed */
       if(DIO_u8LOW==Local_u8GetState){
    3d42:	8c 81       	ldd	r24, Y+4	; 0x04
    3d44:	88 23       	and	r24, r24
    3d46:	79 f5       	brne	.+94     	; 0x3da6 <Keypad_enuGetPressedKey+0xe8>
    	  *Copy_pu8Value_Key=Local_AuKeyPad[Local_u8RowIdx][Local_u8ColIdx];
    3d48:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4a:	48 2f       	mov	r20, r24
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	28 2f       	mov	r18, r24
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	ca 01       	movw	r24, r20
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	82 0f       	add	r24, r18
    3d60:	93 1f       	adc	r25, r19
    3d62:	fc 01       	movw	r30, r24
    3d64:	e4 58       	subi	r30, 0x84	; 132
    3d66:	fe 4f       	sbci	r31, 0xFE	; 254
    3d68:	80 81       	ld	r24, Z
    3d6a:	ed 81       	ldd	r30, Y+5	; 0x05
    3d6c:	fe 81       	ldd	r31, Y+6	; 0x06
    3d6e:	80 83       	st	Z, r24
    3d70:	17 c0       	rjmp	.+46     	; 0x3da0 <Keypad_enuGetPressedKey+0xe2>
    	  while(DIO_u8LOW==Local_u8GetState){
    		  Local_enuErrorState =DIO_enuGetPinVal(Local_Au8RowPorts[Local_u8RowIdx],Local_Au8RowPins [Local_u8RowIdx],&Local_u8GetState);
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	88 2f       	mov	r24, r24
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	fc 01       	movw	r30, r24
    3d7a:	ec 56       	subi	r30, 0x6C	; 108
    3d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d7e:	40 81       	ld	r20, Z
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	fc 01       	movw	r30, r24
    3d88:	e0 57       	subi	r30, 0x70	; 112
    3d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d8c:	90 81       	ld	r25, Z
    3d8e:	9e 01       	movw	r18, r28
    3d90:	2c 5f       	subi	r18, 0xFC	; 252
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	84 2f       	mov	r24, r20
    3d96:	69 2f       	mov	r22, r25
    3d98:	a9 01       	movw	r20, r18
    3d9a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <DIO_enuGetPinVal>
    3d9e:	8b 83       	std	Y+3, r24	; 0x03
        	 Local_enuErrorState= DIO_enuGetPinVal(Local_Au8RowPorts[Local_u8RowIdx],Local_Au8RowPins [Local_u8RowIdx],&Local_u8GetState);

        /*check if switch is pressed */
       if(DIO_u8LOW==Local_u8GetState){
    	  *Copy_pu8Value_Key=Local_AuKeyPad[Local_u8RowIdx][Local_u8ColIdx];
    	  while(DIO_u8LOW==Local_u8GetState){
    3da0:	8c 81       	ldd	r24, Y+4	; 0x04
    3da2:	88 23       	and	r24, r24
    3da4:	31 f3       	breq	.-52     	; 0x3d72 <Keypad_enuGetPressedKey+0xb4>
    for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMNS_NUM;Local_u8ColIdx++)
    {
	   /*Activate current column*/
    	 Local_enuErrorState=DIO_enuSetPinVal(Local_Au8ColPorts[Local_u8ColIdx],Local_Au8ColPins [Local_u8ColIdx],DIO_u8LOW);

        for(Local_u8RowIdx=0;Local_u8RowIdx<ROWS_NUM;Local_u8RowIdx++)
    3da6:	8a 81       	ldd	r24, Y+2	; 0x02
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	8a 83       	std	Y+2, r24	; 0x02
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	84 30       	cpi	r24, 0x04	; 4
    3db0:	08 f4       	brcc	.+2      	; 0x3db4 <Keypad_enuGetPressedKey+0xf6>
    3db2:	b0 cf       	rjmp	.-160    	; 0x3d14 <Keypad_enuGetPressedKey+0x56>

       }

        }
        /* Deactive the current column */
        Local_enuErrorState= DIO_enuSetPinVal(Local_Au8ColPorts[Local_u8ColIdx],Local_Au8ColPins [Local_u8ColIdx],DIO_u8HIGH);
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	fc 01       	movw	r30, r24
    3dbc:	ed 53       	subi	r30, 0x3D	; 61
    3dbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc0:	20 81       	ld	r18, Z
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	fc 01       	movw	r30, r24
    3dca:	e4 57       	subi	r30, 0x74	; 116
    3dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dce:	90 81       	ld	r25, Z
    3dd0:	82 2f       	mov	r24, r18
    3dd2:	69 2f       	mov	r22, r25
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3dda:	8b 83       	std	Y+3, r24	; 0x03
			static u8 Local_Au8RowPins[ROWS_NUM]     = { ROW1_PIN , ROW2_PIN , ROW3_PIN , ROW4_PIN };
			static u8 Local_Au8ColPorts[COLUMNS_NUM]  = { COL1_PORT, COL2_PORT, COL3_PORT, COL4_PORT };
			static u8 Local_Au8ColPins[COLUMNS_NUM]  = { COL1_PIN , COL2_PIN , COL3_PIN , COL4_PIN };
            static u8 Local_AuKeyPad[ROWS_NUM][COLUMNS_NUM]=KEYS_ARRVALUES;

    for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMNS_NUM;Local_u8ColIdx++)
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	8f 5f       	subi	r24, 0xFF	; 255
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	84 30       	cpi	r24, 0x04	; 4
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <Keypad_enuGetPressedKey+0x12c>
    3de8:	7f cf       	rjmp	.-258    	; 0x3ce8 <Keypad_enuGetPressedKey+0x2a>
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <Keypad_enuGetPressedKey+0x132>
        Local_enuErrorState= DIO_enuSetPinVal(Local_Au8ColPorts[Local_u8ColIdx],Local_Au8ColPins [Local_u8ColIdx],DIO_u8HIGH);
          }

		}
	else {
		Local_enuErrorState = ES_NULL_POINTER;
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	8b 83       	std	Y+3, r24	; 0x03
	}


		 return  Local_enuErrorState ;
    3df0:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3df2:	26 96       	adiw	r28, 0x06	; 6
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	cf 91       	pop	r28
    3e00:	df 91       	pop	r29
    3e02:	08 95       	ret

00003e04 <DCMOTOR_enuInit>:
#include "DC_MOTOR_priv.h"
#include "DC_MOTOR_config.h"


ES_t DCMOTOR_enuInit(void)
{
    3e04:	df 93       	push	r29
    3e06:	cf 93       	push	r28
    3e08:	0f 92       	push	r0
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates=ES_NOK;
    3e0e:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDirection(DC_IN1_PORT,DC_IN1_PIN,DIO_u8OUTPUT);
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3e1a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinDirection(DC_IN2_PORT,DC_IN2_PIN,DIO_u8OUTPUT);
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	61 e0       	ldi	r22, 0x01	; 1
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3e26:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN1_PORT,DC_IN1_PIN,DIO_u8LOW);
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	40 e0       	ldi	r20, 0x00	; 0
    3e2e:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3e32:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN2_PORT,DC_IN2_PIN,DIO_u8LOW);
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	61 e0       	ldi	r22, 0x01	; 1
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3e3e:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorStates = DIO_enuSetPinDirection(DIO_u8PORTB,DIO_u8PIN3,DIO_u8OUTPUT);//OC pin
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	63 e0       	ldi	r22, 0x03	; 3
    3e44:	41 e0       	ldi	r20, 0x01	; 1
    3e46:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_enuSetPinDirection>
    3e4a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = TIMER0_enuInit();
    3e4c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <TIMER0_enuInit>
    3e50:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates;
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e54:	0f 90       	pop	r0
    3e56:	cf 91       	pop	r28
    3e58:	df 91       	pop	r29
    3e5a:	08 95       	ret

00003e5c <DCMOTOR_enuChangeDirection>:

ES_t DCMOTOR_enuChangeDirection(u8 Copy_u8Direction)
{
    3e5c:	df 93       	push	r29
    3e5e:	cf 93       	push	r28
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <DCMOTOR_enuChangeDirection+0x6>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates=ES_NOK;
    3e68:	19 82       	std	Y+1, r1	; 0x01

#if Copy_u8Direction == ROTATE_CLKWISE
	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN1_PORT,DC_IN1_PIN,DIO_u8LOW);
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3e74:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN2_PORT,DC_IN2_PIN,DIO_u8HIGH);
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	61 e0       	ldi	r22, 0x01	; 1
    3e7a:	41 e0       	ldi	r20, 0x01	; 1
    3e7c:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3e80:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN2_PORT,DC_IN2_PIN,DIO_u8LOW);
#else
#error "WRONG DIRECTION";
#endif

	return Local_enuErrorStates;
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <DCMOTOR_enuSpeed>:

ES_t DCMOTOR_enuSpeed(u8 Copy_u8Speed)
{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <DCMOTOR_enuSpeed+0x6>
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStates=ES_NOK;
    3e9a:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorStates = TIMER0_enuGeneratePWM(Copy_u8Speed);
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	0e 94 95 0a 	call	0x152a	; 0x152a <TIMER0_enuGeneratePWM>
    3ea2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates;
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <DCMOTOR_enuStop>:

ES_t DCMOTOR_enuStop()
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	0f 92       	push	r0
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStates=ES_NOK;
    3eba:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN1_PORT,DC_IN1_PIN,DIO_u8LOW);
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	60 e0       	ldi	r22, 0x00	; 0
    3ec0:	40 e0       	ldi	r20, 0x00	; 0
    3ec2:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3ec6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorStates = DIO_enuSetPinVal(DC_IN2_PORT,DC_IN2_PIN,DIO_u8LOW);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	61 e0       	ldi	r22, 0x01	; 1
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	0e 94 8d 11 	call	0x231a	; 0x231a <DIO_enuSetPinVal>
    3ed2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStates;
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ed6:	0f 90       	pop	r0
    3ed8:	cf 91       	pop	r28
    3eda:	df 91       	pop	r29
    3edc:	08 95       	ret

00003ede <main>:
 *      Author: user
 */


int main(void)
{}
    3ede:	df 93       	push	r29
    3ee0:	cf 93       	push	r28
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <__mulsi3>:
    3ef0:	62 9f       	mul	r22, r18
    3ef2:	d0 01       	movw	r26, r0
    3ef4:	73 9f       	mul	r23, r19
    3ef6:	f0 01       	movw	r30, r0
    3ef8:	82 9f       	mul	r24, r18
    3efa:	e0 0d       	add	r30, r0
    3efc:	f1 1d       	adc	r31, r1
    3efe:	64 9f       	mul	r22, r20
    3f00:	e0 0d       	add	r30, r0
    3f02:	f1 1d       	adc	r31, r1
    3f04:	92 9f       	mul	r25, r18
    3f06:	f0 0d       	add	r31, r0
    3f08:	83 9f       	mul	r24, r19
    3f0a:	f0 0d       	add	r31, r0
    3f0c:	74 9f       	mul	r23, r20
    3f0e:	f0 0d       	add	r31, r0
    3f10:	65 9f       	mul	r22, r21
    3f12:	f0 0d       	add	r31, r0
    3f14:	99 27       	eor	r25, r25
    3f16:	72 9f       	mul	r23, r18
    3f18:	b0 0d       	add	r27, r0
    3f1a:	e1 1d       	adc	r30, r1
    3f1c:	f9 1f       	adc	r31, r25
    3f1e:	63 9f       	mul	r22, r19
    3f20:	b0 0d       	add	r27, r0
    3f22:	e1 1d       	adc	r30, r1
    3f24:	f9 1f       	adc	r31, r25
    3f26:	bd 01       	movw	r22, r26
    3f28:	cf 01       	movw	r24, r30
    3f2a:	11 24       	eor	r1, r1
    3f2c:	08 95       	ret

00003f2e <__divmodsi4>:
    3f2e:	97 fb       	bst	r25, 7
    3f30:	09 2e       	mov	r0, r25
    3f32:	05 26       	eor	r0, r21
    3f34:	0e d0       	rcall	.+28     	; 0x3f52 <__divmodsi4_neg1>
    3f36:	57 fd       	sbrc	r21, 7
    3f38:	04 d0       	rcall	.+8      	; 0x3f42 <__divmodsi4_neg2>
    3f3a:	14 d0       	rcall	.+40     	; 0x3f64 <__udivmodsi4>
    3f3c:	0a d0       	rcall	.+20     	; 0x3f52 <__divmodsi4_neg1>
    3f3e:	00 1c       	adc	r0, r0
    3f40:	38 f4       	brcc	.+14     	; 0x3f50 <__divmodsi4_exit>

00003f42 <__divmodsi4_neg2>:
    3f42:	50 95       	com	r21
    3f44:	40 95       	com	r20
    3f46:	30 95       	com	r19
    3f48:	21 95       	neg	r18
    3f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4c:	4f 4f       	sbci	r20, 0xFF	; 255
    3f4e:	5f 4f       	sbci	r21, 0xFF	; 255

00003f50 <__divmodsi4_exit>:
    3f50:	08 95       	ret

00003f52 <__divmodsi4_neg1>:
    3f52:	f6 f7       	brtc	.-4      	; 0x3f50 <__divmodsi4_exit>
    3f54:	90 95       	com	r25
    3f56:	80 95       	com	r24
    3f58:	70 95       	com	r23
    3f5a:	61 95       	neg	r22
    3f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	08 95       	ret

00003f64 <__udivmodsi4>:
    3f64:	a1 e2       	ldi	r26, 0x21	; 33
    3f66:	1a 2e       	mov	r1, r26
    3f68:	aa 1b       	sub	r26, r26
    3f6a:	bb 1b       	sub	r27, r27
    3f6c:	fd 01       	movw	r30, r26
    3f6e:	0d c0       	rjmp	.+26     	; 0x3f8a <__udivmodsi4_ep>

00003f70 <__udivmodsi4_loop>:
    3f70:	aa 1f       	adc	r26, r26
    3f72:	bb 1f       	adc	r27, r27
    3f74:	ee 1f       	adc	r30, r30
    3f76:	ff 1f       	adc	r31, r31
    3f78:	a2 17       	cp	r26, r18
    3f7a:	b3 07       	cpc	r27, r19
    3f7c:	e4 07       	cpc	r30, r20
    3f7e:	f5 07       	cpc	r31, r21
    3f80:	20 f0       	brcs	.+8      	; 0x3f8a <__udivmodsi4_ep>
    3f82:	a2 1b       	sub	r26, r18
    3f84:	b3 0b       	sbc	r27, r19
    3f86:	e4 0b       	sbc	r30, r20
    3f88:	f5 0b       	sbc	r31, r21

00003f8a <__udivmodsi4_ep>:
    3f8a:	66 1f       	adc	r22, r22
    3f8c:	77 1f       	adc	r23, r23
    3f8e:	88 1f       	adc	r24, r24
    3f90:	99 1f       	adc	r25, r25
    3f92:	1a 94       	dec	r1
    3f94:	69 f7       	brne	.-38     	; 0x3f70 <__udivmodsi4_loop>
    3f96:	60 95       	com	r22
    3f98:	70 95       	com	r23
    3f9a:	80 95       	com	r24
    3f9c:	90 95       	com	r25
    3f9e:	9b 01       	movw	r18, r22
    3fa0:	ac 01       	movw	r20, r24
    3fa2:	bd 01       	movw	r22, r26
    3fa4:	cf 01       	movw	r24, r30
    3fa6:	08 95       	ret

00003fa8 <__prologue_saves__>:
    3fa8:	2f 92       	push	r2
    3faa:	3f 92       	push	r3
    3fac:	4f 92       	push	r4
    3fae:	5f 92       	push	r5
    3fb0:	6f 92       	push	r6
    3fb2:	7f 92       	push	r7
    3fb4:	8f 92       	push	r8
    3fb6:	9f 92       	push	r9
    3fb8:	af 92       	push	r10
    3fba:	bf 92       	push	r11
    3fbc:	cf 92       	push	r12
    3fbe:	df 92       	push	r13
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	0f 93       	push	r16
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	ca 1b       	sub	r28, r26
    3fd2:	db 0b       	sbc	r29, r27
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	09 94       	ijmp

00003fe0 <__epilogue_restores__>:
    3fe0:	2a 88       	ldd	r2, Y+18	; 0x12
    3fe2:	39 88       	ldd	r3, Y+17	; 0x11
    3fe4:	48 88       	ldd	r4, Y+16	; 0x10
    3fe6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fe8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fea:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fec:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fee:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ff0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ff2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ff4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ff6:	df 80       	ldd	r13, Y+7	; 0x07
    3ff8:	ee 80       	ldd	r14, Y+6	; 0x06
    3ffa:	fd 80       	ldd	r15, Y+5	; 0x05
    3ffc:	0c 81       	ldd	r16, Y+4	; 0x04
    3ffe:	1b 81       	ldd	r17, Y+3	; 0x03
    4000:	aa 81       	ldd	r26, Y+2	; 0x02
    4002:	b9 81       	ldd	r27, Y+1	; 0x01
    4004:	ce 0f       	add	r28, r30
    4006:	d1 1d       	adc	r29, r1
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	de bf       	out	0x3e, r29	; 62
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	cd bf       	out	0x3d, r28	; 61
    4012:	ed 01       	movw	r28, r26
    4014:	08 95       	ret

00004016 <_exit>:
    4016:	f8 94       	cli

00004018 <__stop_program>:
    4018:	ff cf       	rjmp	.-2      	; 0x4018 <__stop_program>
